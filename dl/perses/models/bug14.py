from onnx import helper
input_tensor = []
output_tensor = []
init_tensor = []
node_list = []

node1 = helper.make_tensor_value_info('node1', 1, [3, 4, 5, 4, 5])
node2 = helper.make_tensor_value_info('node2', 1, [3, 4, 2, 1, 3])
op0 = helper.make_node('AveragePool', inputs=['node1'], outputs=['node2'], name='op0', kernel_shape=[1, 1, 3], strides=[4, 4, 1])
node_list.append(op0)
node3 = helper.make_tensor_value_info('node3', 1, [3, 4, 2, 1, 1])
node4 = helper.make_tensor_value_info('node4', 1, [3, 3, 1, 1, 2])
op1 = helper.make_node('Conv', inputs=['node2', 'node3'], outputs=['node4'], name='op1', kernel_shape=[2, 1, 1], strides=[1, 1, 2], pads=[0, 0, 0, 0, 0, 0], group=1)
node_list.append(op1)
node5 = helper.make_tensor_value_info('node5', 1, [3, 3, 1, 1, 2])
op2 = helper.make_node('Mul', inputs=['node4', 'node4'], outputs=['node5'], name='op2')
node_list.append(op2)
node6 = helper.make_tensor_value_info('node6', 1, [3, 3, 1, 1, 1])
op3 = helper.make_node('GlobalAveragePool', inputs=['node4'], outputs=['node6'], name='op3')
node_list.append(op3)
node7 = helper.make_tensor_value_info('node7', 1, [3, 3, 1, 1, 1])
op4 = helper.make_node('Neg', inputs=['node6'], outputs=['node7'], name='op4')
node_list.append(op4)
node8 = helper.make_tensor_value_info('node8', 7, [5])
init_tensor.append(helper.make_tensor('node8', 7, dims=(5,), vals=[1, 1, 1, 1, 3]))
node9 = helper.make_tensor_value_info('node9', 1, [3, 3, 1, 1, 3])
op5 = helper.make_node('Expand', inputs=['node7', 'node8'], outputs=['node9'], name='op5')
node_list.append(op5)
node10 = helper.make_tensor_value_info('node10', 1, [3, 1, 1, 1, 1])
op6 = helper.make_node('ReduceLogSumExp', inputs=['node7'], outputs=['node10'], name='op6', axes=[1, 2])
node_list.append(op6)
node11 = helper.make_tensor_value_info('node11', 1, [3, 1, 1, 1, 1])
op7 = helper.make_node('ThresholdedRelu', inputs=['node10'], outputs=['node11'], name='op7', alpha=2.0)
node_list.append(op7)
node12 = helper.make_tensor_value_info('node12', 1, [1, 1, 1, 1, 1])
op8 = helper.make_node('ReduceL2', inputs=['node10'], outputs=['node12'], name='op8', axes=[3, 2, 0])
node_list.append(op8)
node13 = helper.make_tensor_value_info('node13', 1, [3, 1, 1, 1, 1])
op9 = helper.make_node('ReduceSumSquare', inputs=['node11'], outputs=['node13'], name='op9', axes=[1])
node_list.append(op9)
node14 = helper.make_tensor_value_info('node14', 1, [1, 1, 1, 1, 1])
op10 = helper.make_node('Relu', inputs=['node12'], outputs=['node14'], name='op10')
node_list.append(op10)
node15 = helper.make_tensor_value_info('node15', 1, [3, 3, 1, 1, 1])
op11 = helper.make_node('Conv', inputs=['node13', 'node13'], outputs=['node15'], name='op11', kernel_shape=[1, 1, 1], strides=[1, 1, 1], pads=[0, 0, 0, 0, 0, 0], group=1)
node_list.append(op11)
node16 = helper.make_tensor_value_info('node16', 1, [3, 3])
op12 = helper.make_node('Flatten', inputs=['node15'], outputs=['node16'], name='op12', axis=1)
node_list.append(op12)
node17 = helper.make_tensor_value_info('node17', 1, [3, 3, 1, 1, 1])
op13 = helper.make_node('Conv', inputs=['node15', 'node15'], outputs=['node17'], name='op13', kernel_shape=[1, 1, 1], strides=[1, 1, 1], pads=[0, 0, 0, 0, 0, 0])
node_list.append(op13)
node18 = helper.make_tensor_value_info('node18', 1, [3, 3, 1, 1, 1])
op14 = helper.make_node('ReduceMin', inputs=['node17'], outputs=['node18'], name='op14', axes=[2])
node_list.append(op14)
node19 = helper.make_tensor_value_info('node19', 1, [3, 3, 1, 1, 1])
op15 = helper.make_node('Dropout', inputs=['node17'], outputs=['node19'], name='op15')
node_list.append(op15)
node20 = helper.make_tensor_value_info('node20', 1, [3, 3, 1, 1, 1])
op16 = helper.make_node('Sign', inputs=['node19'], outputs=['node20'], name='op16')
node_list.append(op16)
node21 = helper.make_tensor_value_info('node21', 1, [3])
node22 = helper.make_tensor_value_info('node22', 1, [3])
node23 = helper.make_tensor_value_info('node23', 1, [3])
node24 = helper.make_tensor_value_info('node24', 1, [3])
node25 = helper.make_tensor_value_info('node25', 1, [3, 3, 1, 1, 1])
op17 = helper.make_node('BatchNormalization', inputs=['node19', 'node21', 'node22', 'node23', 'node24'], outputs=['node25'], name='op17')
node_list.append(op17)
node26 = helper.make_tensor_value_info('node26', 1, [3, 3, 1, 1, 1])
op18 = helper.make_node('Conv', inputs=['node20', 'node20'], outputs=['node26'], name='op18', kernel_shape=[1, 1, 1], strides=[1, 1, 1], pads=[0, 0, 0, 0, 0, 0], group=1)
node_list.append(op18)
node27 = helper.make_tensor_value_info('node27', 1, [3, 3, 1, 1, 1])
op19 = helper.make_node('LeakyRelu', inputs=['node26'], outputs=['node27'], name='op19', alpha=0.01)
node_list.append(op19)
node28 = helper.make_tensor_value_info('node28', 1, [3, 3])
op20 = helper.make_node('Gemm', inputs=['node16', 'node16'], outputs=['node28'], name='op20')
node_list.append(op20)
node29 = helper.make_tensor_value_info('node29', 1, [1, 9])
op21 = helper.make_node('Flatten', inputs=['node28'], outputs=['node29'], name='op21', axis=0)
node_list.append(op21)
node30 = helper.make_tensor_value_info('node30', 1, [3, 3])
op22 = helper.make_node('Gemm', inputs=['node28', 'node28'], outputs=['node30'], name='op22')
node_list.append(op22)
node31 = helper.make_tensor_value_info('node31', 1, [3, 1, 1, 1, 1])
op23 = helper.make_node('GlobalMaxPool', inputs=['node11'], outputs=['node31'], name='op23')
node_list.append(op23)
node32 = helper.make_tensor_value_info('node32', 1, [3, 1, 1, 1, 1])
op24 = helper.make_node('MaxPool', inputs=['node31'], outputs=['node32'], name='op24', kernel_shape=[1, 1, 1], strides=[1, 1, 1])
node_list.append(op24)
node33 = helper.make_tensor_value_info('node33', 7, [3])
init_tensor.append(helper.make_tensor('node33', 7, dims=(3,), vals=[3, 1, 1]))
node34 = helper.make_tensor_value_info('node34', 1, [3, 1, 1])
op25 = helper.make_node('Reshape', inputs=['node31', 'node33'], outputs=['node34'], name='op25')
node_list.append(op25)
node35 = helper.make_tensor_value_info('node35', 1, [3, 1, 1])
op26 = helper.make_node('Mul', inputs=['node34', 'node34'], outputs=['node35'], name='op26')
node_list.append(op26)
node36 = helper.make_tensor_value_info('node36', 1, [3, 1, 1])
op27 = helper.make_node('Cos', inputs=['node35'], outputs=['node36'], name='op27')
node_list.append(op27)
node37 = helper.make_tensor_value_info('node37', 1, [3, 1, 1])
op28 = helper.make_node('Sign', inputs=['node36'], outputs=['node37'], name='op28')
node_list.append(op28)
node38 = helper.make_tensor_value_info('node38', 1, [3, 1, 1])
op29 = helper.make_node('Identity', inputs=['node37'], outputs=['node38'], name='op29')
node_list.append(op29)
node39 = helper.make_tensor_value_info('node39', 1, [3, 1, 1])
op30 = helper.make_node('GlobalAveragePool', inputs=['node38'], outputs=['node39'], name='op30')
node_list.append(op30)
node40 = helper.make_tensor_value_info('node40', 1, [3, 1, 1])
op31 = helper.make_node('Sigmoid', inputs=['node39'], outputs=['node40'], name='op31')
node_list.append(op31)
node41 = helper.make_tensor_value_info('node41', 1, [3, 1, 1])
op32 = helper.make_node('Identity', inputs=['node40'], outputs=['node41'], name='op32')
node_list.append(op32)
node42 = helper.make_tensor_value_info('node42', 1, [3, 1, 1])
op33 = helper.make_node('PRelu', inputs=['node40', 'node41'], outputs=['node42'], name='op33')
node_list.append(op33)
node43 = helper.make_tensor_value_info('node43', 1, [3, 1, 1])
op34 = helper.make_node('Sub', inputs=['node42', 'node41'], outputs=['node43'], name='op34')
node_list.append(op34)
node44 = helper.make_tensor_value_info('node44', 1, [3, 1, 1])
op35 = helper.make_node('AveragePool', inputs=['node42'], outputs=['node44'], name='op35', kernel_shape=[1], strides=[1])
node_list.append(op35)
node45 = helper.make_tensor_value_info('node45', 1, [1, 3])
op36 = helper.make_node('Flatten', inputs=['node43'], outputs=['node45'], name='op36', axis=0)
node_list.append(op36)
node46 = helper.make_tensor_value_info('node46', 1, [1, 3])
op37 = helper.make_node('Tanh', inputs=['node45'], outputs=['node46'], name='op37')
node_list.append(op37)
node47 = helper.make_tensor_value_info('node47', 1, [1, 3])
op38 = helper.make_node('ThresholdedRelu', inputs=['node45'], outputs=['node47'], name='op38', alpha=0.5)
node_list.append(op38)
node48 = helper.make_tensor_value_info('node48', 1, [1, 1])
op39 = helper.make_node('ReduceProd', inputs=['node46'], outputs=['node48'], name='op39', axes=[1])
node_list.append(op39)
node49 = helper.make_tensor_value_info('node49', 1, [1, 1])
op40 = helper.make_node('Max', inputs=['node48', 'node48', 'node48'], outputs=['node49'], name='op40')
node_list.append(op40)
node50 = helper.make_tensor_value_info('node50', 1, [1, 1])
op41 = helper.make_node('Ceil', inputs=['node48'], outputs=['node50'], name='op41')
node_list.append(op41)
node51 = helper.make_tensor_value_info('node51', 1, [3, 3, 1, 1, 1])
op42 = helper.make_node('MaxPool', inputs=['node6'], outputs=['node51'], name='op42', kernel_shape=[1, 1, 1], strides=[1, 1, 1])
node_list.append(op42)
node52 = helper.make_tensor_value_info('node52', 1, [1, 1])
op43 = helper.make_node('Sub', inputs=['node50', 'node50'], outputs=['node52'], name='op43')
node_list.append(op43)
node53 = helper.make_tensor_value_info('node53', 1, [3, 3, 1, 1, 1])
op44 = helper.make_node('Softmax', inputs=['node51'], outputs=['node53'], name='op44', axis=1)
node_list.append(op44)
output_tensor.append(node27)
output_tensor.append(node32)
output_tensor.append(node30)
output_tensor.append(node44)
output_tensor.append(node25)
output_tensor.append(node52)
output_tensor.append(node29)
output_tensor.append(node9)
output_tensor.append(node53)
output_tensor.append(node18)
output_tensor.append(node5)
output_tensor.append(node14)
output_tensor.append(node47)
output_tensor.append(node49)
input_tensor.append(node1)
input_tensor.append(node3)
input_tensor.append(node21)
input_tensor.append(node22)
input_tensor.append(node23)
input_tensor.append(node24)
graph_def = helper.make_graph(node_list, 'test-model', input_tensor, output_tensor, init_tensor)
model = helper.make_model(graph_def, producer_name='onnx-example')
