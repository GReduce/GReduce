from onnx import helper
input_tensor = []
output_tensor = []
init_tensor = []
node_list = []

node1 = helper.make_tensor_value_info('node1', 1, [1, 2, 1, 5, 3])
node2 = helper.make_tensor_value_info('node2', 1, [1, 2, 1, 5, 3])
op0 = helper.make_node('Sin', inputs=['node1'], outputs=['node2'], name='op0')
node_list.append(op0)
node3 = helper.make_tensor_value_info('node3', 7, [5])
init_tensor.append(helper.make_tensor('node3', 7, dims=(5,), vals=[0, 1, 0, 2, 1]))
node4 = helper.make_tensor_value_info('node4', 7, [5])
init_tensor.append(helper.make_tensor('node4', 7, dims=(5,), vals=[1, 2, 1, 4, 3]))
node5 = helper.make_tensor_value_info('node5', 7, [5])
init_tensor.append(helper.make_tensor('node5', 7, dims=(5,), vals=[0, 1, 2, 3, 4]))
node6 = helper.make_tensor_value_info('node6', 7, [5])
init_tensor.append(helper.make_tensor('node6', 7, dims=(5,), vals=[2, 1, 2, 3, 3]))
node7 = helper.make_tensor_value_info('node7', 1, [1, 1, 1, 1, 1])
op1 = helper.make_node('Slice', inputs=['node2', 'node3', 'node4', 'node5', 'node6'], outputs=['node7'], name='op1')
node_list.append(op1)
node8 = helper.make_tensor_value_info('node8', 1, [1, 1, 1, 1, 1])
op2 = helper.make_node('Sqrt', inputs=['node7'], outputs=['node8'], name='op2')
node_list.append(op2)
node9 = helper.make_tensor_value_info('node9', 1, [1, 1, 3])
node10 = helper.make_tensor_value_info('node10', 1, [3])
init_tensor.append(helper.make_tensor('node10', 1, dims=(3,), vals=[1.0, 1.0, 1.0]))
node11 = helper.make_tensor_value_info('node11', 1, [6])
init_tensor.append(helper.make_tensor('node11', 1, dims=(1, 6), vals=[0, 0, 0, 1, 1, 1]))
node12 = helper.make_tensor_value_info('node12', 1, [1, 1, 3])
op3 = helper.make_node('Resize', inputs=['node9', 'node11', 'node10'], outputs=['node12'], name='op3', mode='nearest')
node_list.append(op3)
node13 = helper.make_tensor_value_info('node13', 1, [1, 1, 1, 1, 1])
op4 = helper.make_node('Sin', inputs=['node8'], outputs=['node13'], name='op4')
node_list.append(op4)
node14 = helper.make_tensor_value_info('node14', 1, [1, 1, 1, 1, 1])
op5 = helper.make_node('Erf', inputs=['node13'], outputs=['node14'], name='op5')
node_list.append(op5)
node15 = helper.make_tensor_value_info('node15', 1, [1, 1, 1, 1, 1])
op6 = helper.make_node('PRelu', inputs=['node14', 'node13'], outputs=['node15'], name='op6')
node_list.append(op6)
node16 = helper.make_tensor_value_info('node16', 7, [4])
init_tensor.append(helper.make_tensor('node16', 7, dims=(4,), vals=[1, 4, 0, 3]))
node17 = helper.make_tensor_value_info('node17', 1, [1, 1, 1, 1, 1])
op7 = helper.make_node('ReduceSum', inputs=['node14', 'node16'], outputs=['node17'], name='op7')
node_list.append(op7)
node18 = helper.make_tensor_value_info('node18', 1, [1, 1, 1])
op8 = helper.make_node('LpPool', inputs=['node12'], outputs=['node18'], name='op8', kernel_shape=[2], strides=[2], p=1)
node_list.append(op8)
node19 = helper.make_tensor_value_info('node19', 7, [5])
init_tensor.append(helper.make_tensor('node19', 7, dims=(5,), vals=[0, 0, 0, 0, 0]))
node20 = helper.make_tensor_value_info('node20', 7, [5])
init_tensor.append(helper.make_tensor('node20', 7, dims=(5,), vals=[1, 1, 1, 1, 1]))
node21 = helper.make_tensor_value_info('node21', 7, [5])
init_tensor.append(helper.make_tensor('node21', 7, dims=(5,), vals=[0, 1, 2, 3, 4]))
node22 = helper.make_tensor_value_info('node22', 7, [5])
init_tensor.append(helper.make_tensor('node22', 7, dims=(5,), vals=[2, 1, 1, 1, 3]))
node23 = helper.make_tensor_value_info('node23', 1, [1, 1, 1, 1, 1])
op9 = helper.make_node('Slice', inputs=['node7', 'node19', 'node20', 'node21', 'node22'], outputs=['node23'], name='op9')
node_list.append(op9)
node24 = helper.make_tensor_value_info('node24', 7, [5])
init_tensor.append(helper.make_tensor('node24', 7, dims=(5,), vals=[0, 0, 0, 0, 0]))
node25 = helper.make_tensor_value_info('node25', 7, [5])
init_tensor.append(helper.make_tensor('node25', 7, dims=(5,), vals=[1, 1, 1, 1, 1]))
node26 = helper.make_tensor_value_info('node26', 7, [5])
init_tensor.append(helper.make_tensor('node26', 7, dims=(5,), vals=[0, 1, 2, 3, 4]))
node27 = helper.make_tensor_value_info('node27', 7, [5])
init_tensor.append(helper.make_tensor('node27', 7, dims=(5,), vals=[3, 2, 3, 1, 1]))
node28 = helper.make_tensor_value_info('node28', 1, [1, 1, 1, 1, 1])
op10 = helper.make_node('Slice', inputs=['node23', 'node24', 'node25', 'node26', 'node27'], outputs=['node28'], name='op10')
node_list.append(op10)
node29 = helper.make_tensor_value_info('node29', 1, [1, 1, 1, 1, 1])
op11 = helper.make_node('Sigmoid', inputs=['node28'], outputs=['node29'], name='op11')
node_list.append(op11)
node30 = helper.make_tensor_value_info('node30', 1, [1, 1, 1, 1, 1])
op12 = helper.make_node('ReduceMean', inputs=['node29'], outputs=['node30'], name='op12', axes=[4])
node_list.append(op12)
node31 = helper.make_tensor_value_info('node31', 1, [2, 2])
node32 = helper.make_tensor_value_info('node32', 1, [2, 4])
node33 = helper.make_tensor_value_info('node33', 1, [2, 4])
op13 = helper.make_node('Gemm', inputs=['node31', 'node32'], outputs=['node33'], name='op13')
node_list.append(op13)
node34 = helper.make_tensor_value_info('node34', 1, [2, 4])
op14 = helper.make_node('Exp', inputs=['node33'], outputs=['node34'], name='op14')
node_list.append(op14)
node35 = helper.make_tensor_value_info('node35', 1, [1, 1, 1])
op15 = helper.make_node('GlobalAveragePool', inputs=['node12'], outputs=['node35'], name='op15')
node_list.append(op15)
node36 = helper.make_tensor_value_info('node36', 1, [2, 1])
op16 = helper.make_node('ReduceL1', inputs=['node34'], outputs=['node36'], name='op16', axes=[1])
node_list.append(op16)
node37 = helper.make_tensor_value_info('node37', 1, [1, 1, 1])
op17 = helper.make_node('MaxPool', inputs=['node35'], outputs=['node37'], name='op17', kernel_shape=[1], strides=[1])
node_list.append(op17)
node38 = helper.make_tensor_value_info('node38', 1, [1, 1, 1])
op18 = helper.make_node('AveragePool', inputs=['node37'], outputs=['node38'], name='op18', kernel_shape=[1], strides=[1])
node_list.append(op18)
node39 = helper.make_tensor_value_info('node39', 7, [6])
init_tensor.append(helper.make_tensor('node39', 7, dims=(6,), vals=[0, 1, 2, 0, 0, 2]))
node40 = helper.make_tensor_value_info('node40', 1, [1, 2, 5])
op19 = helper.make_node('Pad', inputs=['node38', 'node39'], outputs=['node40'], name='op19', mode='constant')
node_list.append(op19)
node41 = helper.make_tensor_value_info('node41', 7, [6])
init_tensor.append(helper.make_tensor('node41', 7, dims=(6,), vals=[1, 1, 0, 0, 1, 1]))
node42 = helper.make_tensor_value_info('node42', 1, [2, 4, 6])
op20 = helper.make_node('Pad', inputs=['node40', 'node41'], outputs=['node42'], name='op20', mode='constant')
node_list.append(op20)
node43 = helper.make_tensor_value_info('node43', 1, [1, 2, 2])
op21 = helper.make_node('MaxPool', inputs=['node40'], outputs=['node43'], name='op21', kernel_shape=[1], strides=[4])
node_list.append(op21)
node44 = helper.make_tensor_value_info('node44', 1, [2, 4, 1])
op22 = helper.make_node('GlobalAveragePool', inputs=['node42'], outputs=['node44'], name='op22')
node_list.append(op22)
node45 = helper.make_tensor_value_info('node45', 1, [2, 4, 1])
op23 = helper.make_node('Sqrt', inputs=['node44'], outputs=['node45'], name='op23')
node_list.append(op23)
node46 = helper.make_tensor_value_info('node46', 1, [2, 4, 1])
op24 = helper.make_node('Mul', inputs=['node44', 'node44'], outputs=['node46'], name='op24')
node_list.append(op24)
node47 = helper.make_tensor_value_info('node47', 1, [2, 4, 1])
op25 = helper.make_node('MaxPool', inputs=['node45'], outputs=['node47'], name='op25', kernel_shape=[1], strides=[1])
node_list.append(op25)
node48 = helper.make_tensor_value_info('node48', 7, [3])
init_tensor.append(helper.make_tensor('node48', 7, dims=(3,), vals=[0, 1, 0]))
node49 = helper.make_tensor_value_info('node49', 7, [3])
init_tensor.append(helper.make_tensor('node49', 7, dims=(3,), vals=[1, 3, 1]))
node50 = helper.make_tensor_value_info('node50', 7, [3])
init_tensor.append(helper.make_tensor('node50', 7, dims=(3,), vals=[0, 1, 2]))
node51 = helper.make_tensor_value_info('node51', 7, [3])
init_tensor.append(helper.make_tensor('node51', 7, dims=(3,), vals=[1, 1, 3]))
node52 = helper.make_tensor_value_info('node52', 1, [1, 2, 1])
op26 = helper.make_node('Slice', inputs=['node46', 'node48', 'node49', 'node50', 'node51'], outputs=['node52'], name='op26')
node_list.append(op26)
node53 = helper.make_tensor_value_info('node53', 1, [1, 2, 1])
op27 = helper.make_node('Add', inputs=['node52', 'node52'], outputs=['node53'], name='op27')
node_list.append(op27)
node54 = helper.make_tensor_value_info('node54', 1, [3])
node55 = helper.make_tensor_value_info('node55', 1, [3])
op28 = helper.make_node('Elu', inputs=['node54'], outputs=['node55'], name='op28', alpha=2.0)
node_list.append(op28)
node56 = helper.make_tensor_value_info('node56', 1, [3])
op29 = helper.make_node('Softmax', inputs=['node55'], outputs=['node56'], name='op29', axis=0)
node_list.append(op29)
node57 = helper.make_tensor_value_info('node57', 1, [3])
op30 = helper.make_node('Selu', inputs=['node55'], outputs=['node57'], name='op30')
node_list.append(op30)
node58 = helper.make_tensor_value_info('node58', 1, [2])
node59 = helper.make_tensor_value_info('node59', 1, [2])
op31 = helper.make_node('Ceil', inputs=['node58'], outputs=['node59'], name='op31')
node_list.append(op31)
node60 = helper.make_tensor_value_info('node60', 1, [1, 1, 1, 1, 1])
op32 = helper.make_node('AveragePool', inputs=['node28'], outputs=['node60'], name='op32', kernel_shape=[1, 1, 1], strides=[1, 1, 1])
node_list.append(op32)
node61 = helper.make_tensor_value_info('node61', 7, [5])
init_tensor.append(helper.make_tensor('node61', 7, dims=(5,), vals=[1, 3, 3, 1, 1]))
node62 = helper.make_tensor_value_info('node62', 1, [1, 3, 3, 1, 1])
op33 = helper.make_node('Expand', inputs=['node60', 'node61'], outputs=['node62'], name='op33')
node_list.append(op33)
node63 = helper.make_tensor_value_info('node63', 1, [1, 1, 1, 1, 1])
node64 = helper.make_tensor_value_info('node64', 1, [1, 1, 1, 4, 1])
node65 = helper.make_tensor_value_info('node65', 1, [1, 1, 1, 3, 1])
node66 = helper.make_tensor_value_info('node66', 1, [1, 1, 1, 4, 1])
node67 = helper.make_tensor_value_info('node67', 1, [1, 1, 1, 2, 1])
node68 = helper.make_tensor_value_info('node68', 1, [1, 1, 1, 19, 1])
op34 = helper.make_node('Concat', inputs=['node60', 'node63', 'node64', 'node29', 'node60', 'node65', 'node66', 'node60', 'node67', 'node60'], outputs=['node68'], name='op34', axis=3)
node_list.append(op34)
node69 = helper.make_tensor_value_info('node69', 1, [1, 3, 1, 1, 1])
op35 = helper.make_node('GlobalMaxPool', inputs=['node62'], outputs=['node69'], name='op35')
node_list.append(op35)
node70 = helper.make_tensor_value_info('node70', 1, [1, 3, 1, 1, 1])
op36 = helper.make_node('Abs', inputs=['node69'], outputs=['node70'], name='op36')
node_list.append(op36)
node71 = helper.make_tensor_value_info('node71', 7, [3])
init_tensor.append(helper.make_tensor('node71', 7, dims=(3,), vals=[0, 4, 1]))
node72 = helper.make_tensor_value_info('node72', 1, [1, 1, 1, 1, 1])
op37 = helper.make_node('ReduceSum', inputs=['node70', 'node71'], outputs=['node72'], name='op37')
node_list.append(op37)
node73 = helper.make_tensor_value_info('node73', 7, [2])
init_tensor.append(helper.make_tensor('node73', 7, dims=(2,), vals=[1, 1]))
node74 = helper.make_tensor_value_info('node74', 1, [1, 1])
op38 = helper.make_node('Reshape', inputs=['node72', 'node73'], outputs=['node74'], name='op38')
node_list.append(op38)
node75 = helper.make_tensor_value_info('node75', 1, [1, 1, 1, 1, 1])
node76 = helper.make_tensor_value_info('node76', 7, [1])
init_tensor.append(helper.make_tensor('node76', 7, dims=(1,), vals=[1]))
op39 = helper.make_node('Split', inputs=['node72', 'node76'], outputs=['node75'], name='op39', axis=4)
node_list.append(op39)
node77 = helper.make_tensor_value_info('node77', 1, [1, 1])
op40 = helper.make_node('Gemm', inputs=['node74', 'node74'], outputs=['node77'], name='op40')
node_list.append(op40)
node78 = helper.make_tensor_value_info('node78', 1, [1, 1, 1, 1, 1])
op41 = helper.make_node('Sub', inputs=['node75', 'node75'], outputs=['node78'], name='op41')
node_list.append(op41)
node79 = helper.make_tensor_value_info('node79', 1, [1, 1, 1, 1, 1])
op42 = helper.make_node('Conv', inputs=['node78', 'node78'], outputs=['node79'], name='op42', kernel_shape=[1, 1, 1], strides=[1, 1, 1], pads=[0, 0, 0, 0, 0, 0])
node_list.append(op42)
node80 = helper.make_tensor_value_info('node80', 1, [1, 1, 1, 1, 1])
op43 = helper.make_node('MaxPool', inputs=['node79'], outputs=['node80'], name='op43', kernel_shape=[1, 1, 1], strides=[1, 1, 1])
node_list.append(op43)
node81 = helper.make_tensor_value_info('node81', 1, [1, 1, 1, 1, 1])
op44 = helper.make_node('LeakyRelu', inputs=['node79'], outputs=['node81'], name='op44', alpha=0.02)
node_list.append(op44)
node82 = helper.make_tensor_value_info('node82', 1, [1, 1, 1, 1, 1])
op45 = helper.make_node('Cos', inputs=['node80'], outputs=['node82'], name='op45')
node_list.append(op45)
node83 = helper.make_tensor_value_info('node83', 7, [5])
init_tensor.append(helper.make_tensor('node83', 7, dims=(5,), vals=[1, 1, 1, 1, 1]))
node84 = helper.make_tensor_value_info('node84', 1, [1, 1, 1, 1, 1])
op46 = helper.make_node('Reshape', inputs=['node81', 'node83'], outputs=['node84'], name='op46')
node_list.append(op46)
node85 = helper.make_tensor_value_info('node85', 1, [1, 1, 1, 1, 1])
op47 = helper.make_node('ReduceMin', inputs=['node82'], outputs=['node85'], name='op47', axes=[0, 3])
node_list.append(op47)
node86 = helper.make_tensor_value_info('node86', 7, [1])
init_tensor.append(helper.make_tensor('node86', 7, dims=(1,), vals=[0]))
node87 = helper.make_tensor_value_info('node87', 1, [1, 1, 1, 1, 1])
op48 = helper.make_node('Gather', inputs=['node84', 'node86'], outputs=['node87'], name='op48', axis=3)
node_list.append(op48)
node88 = helper.make_tensor_value_info('node88', 1, [1, 1, 1, 1, 1])
op49 = helper.make_node('Min', inputs=['node87', 'node85', 'node85', 'node85'], outputs=['node88'], name='op49')
node_list.append(op49)
node89 = helper.make_tensor_value_info('node89', 1, [1, 1, 1, 1, 1])
op50 = helper.make_node('MaxPool', inputs=['node87'], outputs=['node89'], name='op50', kernel_shape=[1, 1, 1], strides=[1, 1, 1])
node_list.append(op50)
node90 = helper.make_tensor_value_info('node90', 1, [1, 1, 1, 1, 1])
node91 = helper.make_tensor_value_info('node91', 7, [1])
init_tensor.append(helper.make_tensor('node91', 7, dims=(1,), vals=[1]))
op51 = helper.make_node('Split', inputs=['node88', 'node91'], outputs=['node90'], name='op51', axis=4)
node_list.append(op51)
node92 = helper.make_tensor_value_info('node92', 1, [1, 1, 1, 1, 1])
op52 = helper.make_node('Sign', inputs=['node90'], outputs=['node92'], name='op52')
node_list.append(op52)
node93 = helper.make_tensor_value_info('node93', 7, [2])
init_tensor.append(helper.make_tensor('node93', 7, dims=(2,), vals=[1, 2]))
node94 = helper.make_tensor_value_info('node94', 1, [2, 1, 1])
op53 = helper.make_node('Unsqueeze', inputs=['node59', 'node93'], outputs=['node94'], name='op53')
node_list.append(op53)
node95 = helper.make_tensor_value_info('node95', 1, [2, 1, 1])
op54 = helper.make_node('Softmax', inputs=['node94'], outputs=['node95'], name='op54', axis=2)
node_list.append(op54)
node96 = helper.make_tensor_value_info('node96', 1, [2, 1, 1])
op55 = helper.make_node('Softmax', inputs=['node94'], outputs=['node96'], name='op55', axis=0)
node_list.append(op55)
node97 = helper.make_tensor_value_info('node97', 1, [2, 1, 5])
node98 = helper.make_tensor_value_info('node98', 1, [2, 1, 3])
node99 = helper.make_tensor_value_info('node99', 1, [2, 1, 2])
node100 = helper.make_tensor_value_info('node100', 1, [2, 1, 3])
node101 = helper.make_tensor_value_info('node101', 1, [2, 1, 5])
node102 = helper.make_tensor_value_info('node102', 1, [2, 1, 22])
op56 = helper.make_node('Concat', inputs=['node95', 'node97', 'node95', 'node98', 'node95', 'node95', 'node99', 'node100', 'node101'], outputs=['node102'], name='op56', axis=2)
node_list.append(op56)
node103 = helper.make_tensor_value_info('node103', 7, [4])
init_tensor.append(helper.make_tensor('node103', 7, dims=(4,), vals=[2, 1, 1, 1]))
node104 = helper.make_tensor_value_info('node104', 1, [2, 1, 1, 1])
op57 = helper.make_node('Reshape', inputs=['node96', 'node103'], outputs=['node104'], name='op57')
node_list.append(op57)
node105 = helper.make_tensor_value_info('node105', 1, [2, 1, 22])
op58 = helper.make_node('Softmax', inputs=['node102'], outputs=['node105'], name='op58', axis=1)
node_list.append(op58)
node106 = helper.make_tensor_value_info('node106', 7, [3])
init_tensor.append(helper.make_tensor('node106', 7, dims=(3,), vals=[0, 2, 1]))
node107 = helper.make_tensor_value_info('node107', 1, [1, 1, 1])
op59 = helper.make_node('ReduceSum', inputs=['node105', 'node106'], outputs=['node107'], name='op59')
node_list.append(op59)
node108 = helper.make_tensor_value_info('node108', 1, [1, 1, 1])
op60 = helper.make_node('Ceil', inputs=['node107'], outputs=['node108'], name='op60')
node_list.append(op60)
node109 = helper.make_tensor_value_info('node109', 1, [1, 1, 1])
op61 = helper.make_node('ReduceProd', inputs=['node107'], outputs=['node109'], name='op61', axes=[1, 2])
node_list.append(op61)
node110 = helper.make_tensor_value_info('node110', 1, [1, 1, 1])
op62 = helper.make_node('HardSigmoid', inputs=['node108'], outputs=['node110'], name='op62')
node_list.append(op62)
output_tensor.append(node57)
output_tensor.append(node109)
output_tensor.append(node89)
output_tensor.append(node43)
output_tensor.append(node77)
output_tensor.append(node17)
output_tensor.append(node36)
output_tensor.append(node30)
output_tensor.append(node15)
output_tensor.append(node92)
output_tensor.append(node104)
output_tensor.append(node18)
output_tensor.append(node56)
output_tensor.append(node68)
output_tensor.append(node110)
output_tensor.append(node47)
output_tensor.append(node53)
input_tensor.append(node1)
input_tensor.append(node9)
input_tensor.append(node31)
input_tensor.append(node32)
input_tensor.append(node54)
input_tensor.append(node58)
input_tensor.append(node63)
input_tensor.append(node64)
input_tensor.append(node65)
input_tensor.append(node66)
input_tensor.append(node67)
input_tensor.append(node97)
input_tensor.append(node98)
input_tensor.append(node99)
input_tensor.append(node100)
input_tensor.append(node101)
graph_def = helper.make_graph(node_list, 'test-model', input_tensor, output_tensor, init_tensor)
model = helper.make_model(graph_def, producer_name='onnx-example')
