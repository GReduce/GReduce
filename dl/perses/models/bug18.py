from onnx import helper
input_tensor = []
output_tensor = []
init_tensor = []
node_list = []

node1 = helper.make_tensor_value_info('node1', 1, [2, 4, 1, 5])
node2 = helper.make_tensor_value_info('node2', 1, [2, 4, 1, 2])
op0 = helper.make_node('LpPool', inputs=['node1'], outputs=['node2'], name='op0', kernel_shape=[1, 2], strides=[1, 3], p=1)
node_list.append(op0)
node3 = helper.make_tensor_value_info('node3', 1, [2, 4, 1, 2])
op1 = helper.make_node('Sum', inputs=['node2', 'node2', 'node2', 'node2', 'node2'], outputs=['node3'], name='op1')
node_list.append(op1)
node4 = helper.make_tensor_value_info('node4', 1, [2, 4, 1, 2])
op2 = helper.make_node('Max', inputs=['node2', 'node2'], outputs=['node4'], name='op2')
node_list.append(op2)
node5 = helper.make_tensor_value_info('node5', 1, [2, 4, 1, 1])
op3 = helper.make_node('GlobalAveragePool', inputs=['node3'], outputs=['node5'], name='op3')
node_list.append(op3)
node6 = helper.make_tensor_value_info('node6', 1, [4, 2])
node7 = helper.make_tensor_value_info('node7', 1, [1, 1])
op4 = helper.make_node('ReduceMax', inputs=['node6'], outputs=['node7'], name='op4', axes=[0, 1])
node_list.append(op4)
node8 = helper.make_tensor_value_info('node8', 1, [1, 1])
op5 = helper.make_node('Identity', inputs=['node7'], outputs=['node8'], name='op5')
node_list.append(op5)
node9 = helper.make_tensor_value_info('node9', 1, [2, 4, 1, 1])
op6 = helper.make_node('GlobalAveragePool', inputs=['node2'], outputs=['node9'], name='op6')
node_list.append(op6)
node10 = helper.make_tensor_value_info('node10', 7, [2])
init_tensor.append(helper.make_tensor('node10', 7, dims=(2,), vals=[0, 0]))
node11 = helper.make_tensor_value_info('node11', 7, [2])
init_tensor.append(helper.make_tensor('node11', 7, dims=(2,), vals=[1, 1]))
node12 = helper.make_tensor_value_info('node12', 7, [2])
init_tensor.append(helper.make_tensor('node12', 7, dims=(2,), vals=[0, 1]))
node13 = helper.make_tensor_value_info('node13', 7, [2])
init_tensor.append(helper.make_tensor('node13', 7, dims=(2,), vals=[3, 2]))
node14 = helper.make_tensor_value_info('node14', 1, [1, 1])
op7 = helper.make_node('Slice', inputs=['node8', 'node10', 'node11', 'node12', 'node13'], outputs=['node14'], name='op7')
node_list.append(op7)
node15 = helper.make_tensor_value_info('node15', 1, [2, 4, 1, 1])
op8 = helper.make_node('Erf', inputs=['node9'], outputs=['node15'], name='op8')
node_list.append(op8)
node16 = helper.make_tensor_value_info('node16', 1, [2, 4, 1, 1])
op9 = helper.make_node('Softsign', inputs=['node15'], outputs=['node16'], name='op9')
node_list.append(op9)
node17 = helper.make_tensor_value_info('node17', 1, [2, 4, 1, 1])
op10 = helper.make_node('Neg', inputs=['node15'], outputs=['node17'], name='op10')
node_list.append(op10)
node18 = helper.make_tensor_value_info('node18', 1, [4])
init_tensor.append(helper.make_tensor('node18', 1, dims=(4,), vals=[1.0, 1.0, 1.0, 1.0]))
node19 = helper.make_tensor_value_info('node19', 1, [8])
init_tensor.append(helper.make_tensor('node19', 1, dims=(1, 8), vals=[0, 0, 0, 0, 1, 1, 1, 1]))
node20 = helper.make_tensor_value_info('node20', 1, [2, 4, 1, 1])
op11 = helper.make_node('Resize', inputs=['node17', 'node19', 'node18'], outputs=['node20'], name='op11', mode='nearest')
node_list.append(op11)
node21 = helper.make_tensor_value_info('node21', 7, [4])
init_tensor.append(helper.make_tensor('node21', 7, dims=(4,), vals=[1, 1, 2, 1]))
node22 = helper.make_tensor_value_info('node22', 1, [2, 4, 2, 1])
op12 = helper.make_node('Expand', inputs=['node17', 'node21'], outputs=['node22'], name='op12')
node_list.append(op12)
node23 = helper.make_tensor_value_info('node23', 1, [2, 1, 1, 4])
op13 = helper.make_node('Transpose', inputs=['node20'], outputs=['node23'], name='op13', perm=[0, 3, 2, 1])
node_list.append(op13)
node24 = helper.make_tensor_value_info('node24', 1, [2, 1, 1, 4])
op14 = helper.make_node('Add', inputs=['node23', 'node23'], outputs=['node24'], name='op14')
node_list.append(op14)
node25 = helper.make_tensor_value_info('node25', 7, [1])
init_tensor.append(helper.make_tensor('node25', 7, dims=(1,), vals=[1]))
node26 = helper.make_tensor_value_info('node26', 1, [2, 1, 1, 4])
op15 = helper.make_node('ReduceSum', inputs=['node24', 'node25'], outputs=['node26'], name='op15')
node_list.append(op15)
node27 = helper.make_tensor_value_info('node27', 1, [2, 1, 1, 4])
op16 = helper.make_node('PRelu', inputs=['node24', 'node24'], outputs=['node27'], name='op16')
node_list.append(op16)
node28 = helper.make_tensor_value_info('node28', 1, [1, 1, 1, 4])
op17 = helper.make_node('ReduceProd', inputs=['node26'], outputs=['node28'], name='op17', axes=[0, 2])
node_list.append(op17)
node29 = helper.make_tensor_value_info('node29', 1, [2, 1, 1, 4])
node30 = helper.make_tensor_value_info('node30', 1, [2, 1, 1, 4])
op18 = helper.make_node('Min', inputs=['node27', 'node27', 'node29', 'node27', 'node27', 'node27', 'node27', 'node27', 'node27', 'node27'], outputs=['node30'], name='op18')
node_list.append(op18)
node31 = helper.make_tensor_value_info('node31', 7, [8])
init_tensor.append(helper.make_tensor('node31', 7, dims=(8,), vals=[1, 1, 0, 2, 1, 0, 2, 1]))
node32 = helper.make_tensor_value_info('node32', 1, [3, 2, 3, 7])
op19 = helper.make_node('Pad', inputs=['node28', 'node31'], outputs=['node32'], name='op19', mode='constant')
node_list.append(op19)
node33 = helper.make_tensor_value_info('node33', 1, [18, 7])
op20 = helper.make_node('Flatten', inputs=['node32'], outputs=['node33'], name='op20', axis=3)
node_list.append(op20)
node34 = helper.make_tensor_value_info('node34', 7, [2])
init_tensor.append(helper.make_tensor('node34', 7, dims=(2,), vals=[1, 1]))
node35 = helper.make_tensor_value_info('node35', 1, [18, 7])
op21 = helper.make_node('Expand', inputs=['node33', 'node34'], outputs=['node35'], name='op21')
node_list.append(op21)
node36 = helper.make_tensor_value_info('node36', 1, [2, 2, 1, 1])
op22 = helper.make_node('Conv', inputs=['node20', 'node5'], outputs=['node36'], name='op22', kernel_shape=[1, 1], strides=[1, 1], pads=[0, 0, 0, 0], group=1)
node_list.append(op22)
node37 = helper.make_tensor_value_info('node37', 1, [2, 2, 1, 1])
op23 = helper.make_node('Sin', inputs=['node36'], outputs=['node37'], name='op23')
node_list.append(op23)
node38 = helper.make_tensor_value_info('node38', 1, [2, 2, 1, 1])
op24 = helper.make_node('PRelu', inputs=['node36', 'node37'], outputs=['node38'], name='op24')
node_list.append(op24)
node39 = helper.make_tensor_value_info('node39', 1, [1, 1])
op25 = helper.make_node('Gemm', inputs=['node8', 'node14'], outputs=['node39'], name='op25')
node_list.append(op25)
node40 = helper.make_tensor_value_info('node40', 1, [2, 2, 1, 1])
op26 = helper.make_node('LpPool', inputs=['node38'], outputs=['node40'], name='op26', kernel_shape=[1, 1], strides=[1, 1], p=2)
node_list.append(op26)
node41 = helper.make_tensor_value_info('node41', 1, [2, 2, 1, 1])
op27 = helper.make_node('Sin', inputs=['node40'], outputs=['node41'], name='op27')
node_list.append(op27)
node42 = helper.make_tensor_value_info('node42', 1, [2, 2, 1, 1])
op28 = helper.make_node('Min', inputs=['node41', 'node41'], outputs=['node42'], name='op28')
node_list.append(op28)
node43 = helper.make_tensor_value_info('node43', 1, [2, 2, 1, 1])
op29 = helper.make_node('Ceil', inputs=['node42'], outputs=['node43'], name='op29')
node_list.append(op29)
node44 = helper.make_tensor_value_info('node44', 1, [1, 2, 1, 1])
op30 = helper.make_node('ReduceLogSumExp', inputs=['node43'], outputs=['node44'], name='op30', axes=[2, 0])
node_list.append(op30)
output_tensor.append(node35)
output_tensor.append(node4)
output_tensor.append(node39)
output_tensor.append(node30)
output_tensor.append(node22)
output_tensor.append(node16)
output_tensor.append(node44)
input_tensor.append(node1)
input_tensor.append(node6)
input_tensor.append(node29)
graph_def = helper.make_graph(node_list, 'test-model', input_tensor, output_tensor, init_tensor)
model = helper.make_model(graph_def, producer_name='onnx-example')
