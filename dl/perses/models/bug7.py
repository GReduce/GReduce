from onnx import helper
input_tensor = []
output_tensor = []
init_tensor = []
node_list = []

node1 = helper.make_tensor_value_info('node1', 1, [1, 2])
node2 = helper.make_tensor_value_info('node2', 1, [2, 2])
node3 = helper.make_tensor_value_info('node3', 1, [1, 2])
op0 = helper.make_node('MatMul', inputs=['node1', 'node2'], outputs=['node3'], name='op0')
node_list.append(op0)
node4 = helper.make_tensor_value_info('node4', 1, [1, 2])
op1 = helper.make_node('Dropout', inputs=['node1'], outputs=['node4'], name='op1')
node_list.append(op1)
node5 = helper.make_tensor_value_info('node5', 1, [1, 2])
op2 = helper.make_node('Round', inputs=['node3'], outputs=['node5'], name='op2')
node_list.append(op2)
node6 = helper.make_tensor_value_info('node6', 1, [1, 2])
op3 = helper.make_node('Softsign', inputs=['node1'], outputs=['node6'], name='op3')
node_list.append(op3)
node7 = helper.make_tensor_value_info('node7', 1, [1, 2])
op4 = helper.make_node('Dropout', inputs=['node5'], outputs=['node7'], name='op4')
node_list.append(op4)
node8 = helper.make_tensor_value_info('node8', 7, [4, 3, 1, 1])
init_tensor.append(helper.make_tensor('node8', 7, dims=(4, 3, 1, 1), vals=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
node9 = helper.make_tensor_value_info('node9', 1, [4, 3, 1, 1, 2])
op5 = helper.make_node('Gather', inputs=['node6', 'node8'], outputs=['node9'], name='op5', axis=0)
node_list.append(op5)
node10 = helper.make_tensor_value_info('node10', 1, [4, 3, 1, 1, 2])
op6 = helper.make_node('Floor', inputs=['node9'], outputs=['node10'], name='op6')
node_list.append(op6)
node11 = helper.make_tensor_value_info('node11', 7, [5])
init_tensor.append(helper.make_tensor('node11', 7, dims=(5,), vals=[1, 1, 3, 3, 1]))
node12 = helper.make_tensor_value_info('node12', 1, [4, 3, 3, 3, 2])
op7 = helper.make_node('Expand', inputs=['node10', 'node11'], outputs=['node12'], name='op7')
node_list.append(op7)
node13 = helper.make_tensor_value_info('node13', 1, [4, 1])
node14 = helper.make_tensor_value_info('node14', 1, [1, 1])
op8 = helper.make_node('ReduceProd', inputs=['node13'], outputs=['node14'], name='op8', axes=[0])
node_list.append(op8)
node15 = helper.make_tensor_value_info('node15', 1, [1, 1])
op9 = helper.make_node('ReduceLogSumExp', inputs=['node14'], outputs=['node15'], name='op9', axes=[0, 1])
node_list.append(op9)
node16 = helper.make_tensor_value_info('node16', 1, [12, 2])
op10 = helper.make_node('Flatten', inputs=['node10'], outputs=['node16'], name='op10', axis=3)
node_list.append(op10)
node17 = helper.make_tensor_value_info('node17', 1, [12, 2])
op11 = helper.make_node('Sign', inputs=['node16'], outputs=['node17'], name='op11')
node_list.append(op11)
node18 = helper.make_tensor_value_info('node18', 1, [1, 1])
op12 = helper.make_node('ReduceLogSumExp', inputs=['node16'], outputs=['node18'], name='op12', axes=[0, 1])
node_list.append(op12)
node19 = helper.make_tensor_value_info('node19', 1, [12, 2])
op13 = helper.make_node('Add', inputs=['node17', 'node17'], outputs=['node19'], name='op13')
node_list.append(op13)
node20 = helper.make_tensor_value_info('node20', 1, [1, 1])
op14 = helper.make_node('Relu', inputs=['node18'], outputs=['node20'], name='op14')
node_list.append(op14)
node21 = helper.make_tensor_value_info('node21', 1, [1, 1])
op15 = helper.make_node('PRelu', inputs=['node20', 'node20'], outputs=['node21'], name='op15')
node_list.append(op15)
node22 = helper.make_tensor_value_info('node22', 7, [5])
init_tensor.append(helper.make_tensor('node22', 7, dims=(5,), vals=[1, 1, 1, 1, 1]))
node23 = helper.make_tensor_value_info('node23', 1, [1, 1, 1, 1, 1])
op16 = helper.make_node('Reshape', inputs=['node20', 'node22'], outputs=['node23'], name='op16')
node_list.append(op16)
node24 = helper.make_tensor_value_info('node24', 1, [1, 1])
op17 = helper.make_node('Exp', inputs=['node21'], outputs=['node24'], name='op17')
node_list.append(op17)
node25 = helper.make_tensor_value_info('node25', 1, [1])
node26 = helper.make_tensor_value_info('node26', 1, [1])
node27 = helper.make_tensor_value_info('node27', 1, [1])
node28 = helper.make_tensor_value_info('node28', 1, [1])
node29 = helper.make_tensor_value_info('node29', 1, [1, 1, 1, 1, 1])
op18 = helper.make_node('BatchNormalization', inputs=['node23', 'node25', 'node26', 'node27', 'node28'], outputs=['node29'], name='op18')
node_list.append(op18)
node30 = helper.make_tensor_value_info('node30', 1, [1, 1, 1, 1, 1])
op19 = helper.make_node('GlobalAveragePool', inputs=['node29'], outputs=['node30'], name='op19')
node_list.append(op19)
node31 = helper.make_tensor_value_info('node31', 1, [1, 1, 1, 1, 1])
op20 = helper.make_node('Round', inputs=['node30'], outputs=['node31'], name='op20')
node_list.append(op20)
node32 = helper.make_tensor_value_info('node32', 1, [1, 1, 1, 1, 1])
op21 = helper.make_node('Min', inputs=['node30', 'node31', 'node30', 'node30', 'node30', 'node30', 'node31', 'node31'], outputs=['node32'], name='op21')
node_list.append(op21)
node33 = helper.make_tensor_value_info('node33', 7, [10])
init_tensor.append(helper.make_tensor('node33', 7, dims=(10,), vals=[2, 2, 2, 2, 2, 0, 0, 0, 1, 0]))
node34 = helper.make_tensor_value_info('node34', 1, [3, 3, 3, 4, 3])
op22 = helper.make_node('Pad', inputs=['node32', 'node33'], outputs=['node34'], name='op22', mode='constant')
node_list.append(op22)
node35 = helper.make_tensor_value_info('node35', 1, [3, 3, 3, 4, 3])
op23 = helper.make_node('Sum', inputs=['node34', 'node34', 'node34', 'node34'], outputs=['node35'], name='op23')
node_list.append(op23)
node36 = helper.make_tensor_value_info('node36', 1, [3, 3, 3, 4, 3])
op24 = helper.make_node('Exp', inputs=['node34'], outputs=['node36'], name='op24')
node_list.append(op24)
node37 = helper.make_tensor_value_info('node37', 1, [3, 5, 3, 5])
node38 = helper.make_tensor_value_info('node38', 1, [3, 5, 3, 5])
op25 = helper.make_node('SpaceToDepth', inputs=['node37'], outputs=['node38'], name='op25', blocksize=1)
node_list.append(op25)
node39 = helper.make_tensor_value_info('node39', 1, [4])
init_tensor.append(helper.make_tensor('node39', 1, dims=(4,), vals=[1.0, 1.0, 1.0, 1.0]))
node40 = helper.make_tensor_value_info('node40', 1, [8])
init_tensor.append(helper.make_tensor('node40', 1, dims=(1, 8), vals=[0, 0, 0, 0, 1, 1, 1, 1]))
node41 = helper.make_tensor_value_info('node41', 1, [3, 5, 3, 5])
op26 = helper.make_node('Resize', inputs=['node38', 'node40', 'node39'], outputs=['node41'], name='op26', mode='nearest')
node_list.append(op26)
node42 = helper.make_tensor_value_info('node42', 1, [3, 5, 1, 1])
op27 = helper.make_node('GlobalMaxPool', inputs=['node41'], outputs=['node42'], name='op27')
node_list.append(op27)
node43 = helper.make_tensor_value_info('node43', 1, [3, 1, 5, 1])
op28 = helper.make_node('Transpose', inputs=['node42'], outputs=['node43'], name='op28', perm=[0, 3, 1, 2])
node_list.append(op28)
node44 = helper.make_tensor_value_info('node44', 1, [3, 5, 1, 1])
op29 = helper.make_node('AveragePool', inputs=['node42'], outputs=['node44'], name='op29', kernel_shape=[1, 1], strides=[1, 1])
node_list.append(op29)
node45 = helper.make_tensor_value_info('node45', 1, [3, 1, 5, 1])
op30 = helper.make_node('Erf', inputs=['node43'], outputs=['node45'], name='op30')
node_list.append(op30)
node46 = helper.make_tensor_value_info('node46', 1, [1, 1, 1, 1])
op31 = helper.make_node('ReduceL1', inputs=['node44'], outputs=['node46'], name='op31', axes=[3, 1, 0])
node_list.append(op31)
node47 = helper.make_tensor_value_info('node47', 1, [1, 1, 1, 1])
op32 = helper.make_node('ReduceSumSquare', inputs=['node46'], outputs=['node47'], name='op32', axes=[0, 2])
node_list.append(op32)
node48 = helper.make_tensor_value_info('node48', 1, [1, 1, 1, 1])
op33 = helper.make_node('AveragePool', inputs=['node47'], outputs=['node48'], name='op33', kernel_shape=[1, 1], strides=[1, 1])
node_list.append(op33)
node49 = helper.make_tensor_value_info('node49', 1, [1])
node50 = helper.make_tensor_value_info('node50', 1, [1])
op34 = helper.make_node('Elu', inputs=['node49'], outputs=['node50'], name='op34')
node_list.append(op34)
node51 = helper.make_tensor_value_info('node51', 1, [1, 1, 1, 1])
op35 = helper.make_node('ReduceL1', inputs=['node48'], outputs=['node51'], name='op35', axes=[2, 0, 3, 1])
node_list.append(op35)
node52 = helper.make_tensor_value_info('node52', 1, [1])
op36 = helper.make_node('Round', inputs=['node50'], outputs=['node52'], name='op36')
node_list.append(op36)
node53 = helper.make_tensor_value_info('node53', 1, [1, 1, 1, 1])
op37 = helper.make_node('Dropout', inputs=['node51'], outputs=['node53'], name='op37')
node_list.append(op37)
node54 = helper.make_tensor_value_info('node54', 1, [1])
op38 = helper.make_node('ReduceLogSumExp', inputs=['node52'], outputs=['node54'], name='op38', axes=[0])
node_list.append(op38)
node55 = helper.make_tensor_value_info('node55', 7, [1, 1])
init_tensor.append(helper.make_tensor('node55', 7, dims=(1, 1), vals=[0]))
node56 = helper.make_tensor_value_info('node56', 1, [1, 1])
op39 = helper.make_node('Gather', inputs=['node54', 'node55'], outputs=['node56'], name='op39', axis=0)
node_list.append(op39)
node57 = helper.make_tensor_value_info('node57', 1, [1])
op40 = helper.make_node('Add', inputs=['node54', 'node54'], outputs=['node57'], name='op40')
node_list.append(op40)
node58 = helper.make_tensor_value_info('node58', 7, [5])
init_tensor.append(helper.make_tensor('node58', 7, dims=(5,), vals=[0, 0, 0, 0, 0]))
node59 = helper.make_tensor_value_info('node59', 7, [5])
init_tensor.append(helper.make_tensor('node59', 7, dims=(5,), vals=[1, 1, 1, 1, 1]))
node60 = helper.make_tensor_value_info('node60', 7, [5])
init_tensor.append(helper.make_tensor('node60', 7, dims=(5,), vals=[0, 1, 2, 3, 4]))
node61 = helper.make_tensor_value_info('node61', 7, [5])
init_tensor.append(helper.make_tensor('node61', 7, dims=(5,), vals=[1, 1, 1, 2, 3]))
node62 = helper.make_tensor_value_info('node62', 1, [1, 1, 1, 1, 1])
op41 = helper.make_node('Slice', inputs=['node31', 'node58', 'node59', 'node60', 'node61'], outputs=['node62'], name='op41')
node_list.append(op41)
node63 = helper.make_tensor_value_info('node63', 7, [1])
init_tensor.append(helper.make_tensor('node63', 7, dims=(1,), vals=[0]))
node64 = helper.make_tensor_value_info('node64', 1, [1, 1, 1, 1, 1])
op42 = helper.make_node('Gather', inputs=['node62', 'node63'], outputs=['node64'], name='op42', axis=3)
node_list.append(op42)
node65 = helper.make_tensor_value_info('node65', 1, [1, 1, 1, 1, 1])
op43 = helper.make_node('ReduceSumSquare', inputs=['node64'], outputs=['node65'], name='op43', axes=[0, 2])
node_list.append(op43)
node66 = helper.make_tensor_value_info('node66', 1, [1])
op44 = helper.make_node('Elu', inputs=['node52'], outputs=['node66'], name='op44')
node_list.append(op44)
node67 = helper.make_tensor_value_info('node67', 1, [1, 1, 1, 1, 1])
op45 = helper.make_node('Sigmoid', inputs=['node65'], outputs=['node67'], name='op45')
node_list.append(op45)
node68 = helper.make_tensor_value_info('node68', 1, [1, 1, 1, 1, 1])
op46 = helper.make_node('Sigmoid', inputs=['node67'], outputs=['node68'], name='op46')
node_list.append(op46)
node69 = helper.make_tensor_value_info('node69', 7, [2])
init_tensor.append(helper.make_tensor('node69', 7, dims=(2,), vals=[1, 3]))
node70 = helper.make_tensor_value_info('node70', 1, [1, 1, 1, 1])
op47 = helper.make_node('Unsqueeze', inputs=['node56', 'node69'], outputs=['node70'], name='op47')
node_list.append(op47)
node71 = helper.make_tensor_value_info('node71', 1, [1, 1, 1, 1])
op48 = helper.make_node('Sin', inputs=['node70'], outputs=['node71'], name='op48')
node_list.append(op48)
node72 = helper.make_tensor_value_info('node72', 1, [1, 1, 1, 1])
op49 = helper.make_node('Dropout', inputs=['node71'], outputs=['node72'], name='op49')
node_list.append(op49)
node73 = helper.make_tensor_value_info('node73', 1, [1, 1, 1, 1])
op50 = helper.make_node('Relu', inputs=['node71'], outputs=['node73'], name='op50')
node_list.append(op50)
node74 = helper.make_tensor_value_info('node74', 1, [1, 1, 1, 1])
op51 = helper.make_node('LpPool', inputs=['node72'], outputs=['node74'], name='op51', kernel_shape=[1, 1], strides=[1, 1])
node_list.append(op51)
node75 = helper.make_tensor_value_info('node75', 1, [1, 3])
node76 = helper.make_tensor_value_info('node76', 1, [1, 3])
op52 = helper.make_node('Relu', inputs=['node75'], outputs=['node76'], name='op52')
node_list.append(op52)
node77 = helper.make_tensor_value_info('node77', 1, [1, 3])
op53 = helper.make_node('Round', inputs=['node76'], outputs=['node77'], name='op53')
node_list.append(op53)
node78 = helper.make_tensor_value_info('node78', 1, [1, 3])
op54 = helper.make_node('Round', inputs=['node77'], outputs=['node78'], name='op54')
node_list.append(op54)
node79 = helper.make_tensor_value_info('node79', 1, [3, 5, 1, 2])
op55 = helper.make_node('LpPool', inputs=['node38'], outputs=['node79'], name='op55', kernel_shape=[2, 2], strides=[3, 2], p=1)
node_list.append(op55)
node80 = helper.make_tensor_value_info('node80', 1, [3, 5, 1, 1])
op56 = helper.make_node('GlobalAveragePool', inputs=['node79'], outputs=['node80'], name='op56')
node_list.append(op56)
node81 = helper.make_tensor_value_info('node81', 1, [1, 30])
op57 = helper.make_node('Flatten', inputs=['node79'], outputs=['node81'], name='op57', axis=0)
node_list.append(op57)
node82 = helper.make_tensor_value_info('node82', 1, [4])
init_tensor.append(helper.make_tensor('node82', 1, dims=(4,), vals=[1.0, 1.0, 1.0, 1.0]))
node83 = helper.make_tensor_value_info('node83', 1, [8])
init_tensor.append(helper.make_tensor('node83', 1, dims=(1, 8), vals=[0, 0, 0, 0, 1, 1, 1, 1]))
node84 = helper.make_tensor_value_info('node84', 1, [3, 5, 1, 1])
op58 = helper.make_node('Resize', inputs=['node80', 'node83', 'node82'], outputs=['node84'], name='op58', mode='nearest')
node_list.append(op58)
node85 = helper.make_tensor_value_info('node85', 1, [5, 4, 1, 3, 2])
node86 = helper.make_tensor_value_info('node86', 1, [5, 4, 1, 1, 1])
op59 = helper.make_node('GlobalMaxPool', inputs=['node85'], outputs=['node86'], name='op59')
node_list.append(op59)
node87 = helper.make_tensor_value_info('node87', 1, [1])
op60 = helper.make_node('Elu', inputs=['node57'], outputs=['node87'], name='op60')
node_list.append(op60)
node88 = helper.make_tensor_value_info('node88', 1, [1, 4, 1, 1, 1])
op61 = helper.make_node('ReduceL1', inputs=['node86'], outputs=['node88'], name='op61', axes=[2, 4, 0])
node_list.append(op61)
node89 = helper.make_tensor_value_info('node89', 1, [1, 4, 1, 1, 1])
op62 = helper.make_node('Softsign', inputs=['node88'], outputs=['node89'], name='op62')
node_list.append(op62)
node90 = helper.make_tensor_value_info('node90', 1, [1, 4, 1, 1, 1])
op63 = helper.make_node('GlobalAveragePool', inputs=['node89'], outputs=['node90'], name='op63')
node_list.append(op63)
node91 = helper.make_tensor_value_info('node91', 1, [1, 4, 1, 1, 1])
op64 = helper.make_node('Softmax', inputs=['node89'], outputs=['node91'], name='op64', axis=2)
node_list.append(op64)
node92 = helper.make_tensor_value_info('node92', 1, [1, 4, 1, 1, 1])
op65 = helper.make_node('Sum', inputs=['node91', 'node91'], outputs=['node92'], name='op65')
node_list.append(op65)
node93 = helper.make_tensor_value_info('node93', 1, [1, 1, 1, 1, 1])
op66 = helper.make_node('ReduceL1', inputs=['node91'], outputs=['node93'], name='op66', axes=[0, 2, 3, 1])
node_list.append(op66)
node94 = helper.make_tensor_value_info('node94', 1, [1, 1, 1, 1, 1])
op67 = helper.make_node('PRelu', inputs=['node93', 'node93'], outputs=['node94'], name='op67')
node_list.append(op67)
node95 = helper.make_tensor_value_info('node95', 1, [1, 1, 1, 1, 1])
op68 = helper.make_node('Softsign', inputs=['node94'], outputs=['node95'], name='op68')
node_list.append(op68)
node96 = helper.make_tensor_value_info('node96', 1, [1, 1, 1, 1, 1])
op69 = helper.make_node('Sub', inputs=['node94', 'node94'], outputs=['node96'], name='op69')
node_list.append(op69)
node97 = helper.make_tensor_value_info('node97', 1, [1, 1, 1, 1, 1])
op70 = helper.make_node('Softmax', inputs=['node95'], outputs=['node97'], name='op70', axis=4)
node_list.append(op70)
node98 = helper.make_tensor_value_info('node98', 1, [1, 1, 1, 1, 1])
op71 = helper.make_node('Softmax', inputs=['node97'], outputs=['node98'], name='op71', axis=4)
node_list.append(op71)
node99 = helper.make_tensor_value_info('node99', 1, [1, 1, 1, 1, 1])
op72 = helper.make_node('ReduceMin', inputs=['node97'], outputs=['node99'], name='op72', axes=[1, 0, 4, 2])
node_list.append(op72)
node100 = helper.make_tensor_value_info('node100', 1, [1, 1, 1, 1, 1])
op73 = helper.make_node('ReduceLogSumExp', inputs=['node98'], outputs=['node100'], name='op73', axes=[4, 0, 3, 1])
node_list.append(op73)
node101 = helper.make_tensor_value_info('node101', 1, [1, 1, 1, 1, 1])
op74 = helper.make_node('Mean', inputs=['node100', 'node99', 'node100', 'node99'], outputs=['node101'], name='op74')
node_list.append(op74)
node102 = helper.make_tensor_value_info('node102', 1, [5, 5, 4, 4, 2])
node103 = helper.make_tensor_value_info('node103', 1, [1, 5, 4, 1, 1])
op75 = helper.make_node('ReduceMax', inputs=['node102'], outputs=['node103'], name='op75', axes=[0, 3, 4])
node_list.append(op75)
node104 = helper.make_tensor_value_info('node104', 1, [1, 1, 1, 1, 1])
op76 = helper.make_node('Div', inputs=['node101', 'node101'], outputs=['node104'], name='op76')
node_list.append(op76)
node105 = helper.make_tensor_value_info('node105', 1, [1, 1, 1, 1, 1])
node106 = helper.make_tensor_value_info('node106', 1, [1, 1, 1, 1, 1])
op77 = helper.make_node('Max', inputs=['node104', 'node104', 'node104', 'node104', 'node105', 'node104', 'node104', 'node104'], outputs=['node106'], name='op77')
node_list.append(op77)
node107 = helper.make_tensor_value_info('node107', 1, [1, 1, 1, 1, 1])
op78 = helper.make_node('ReduceProd', inputs=['node106'], outputs=['node107'], name='op78', axes=[0, 2, 4, 3, 1])
node_list.append(op78)
node108 = helper.make_tensor_value_info('node108', 1, [1, 1, 1, 1, 1])
op79 = helper.make_node('ReduceMax', inputs=['node107'], outputs=['node108'], name='op79', axes=[1, 4])
node_list.append(op79)
output_tensor.append(node45)
output_tensor.append(node35)
output_tensor.append(node87)
output_tensor.append(node12)
output_tensor.append(node19)
output_tensor.append(node24)
output_tensor.append(node53)
output_tensor.append(node90)
output_tensor.append(node15)
output_tensor.append(node74)
output_tensor.append(node84)
output_tensor.append(node96)
output_tensor.append(node81)
output_tensor.append(node68)
output_tensor.append(node92)
output_tensor.append(node78)
output_tensor.append(node73)
output_tensor.append(node4)
output_tensor.append(node66)
output_tensor.append(node36)
output_tensor.append(node103)
output_tensor.append(node108)
output_tensor.append(node7)
input_tensor.append(node1)
input_tensor.append(node2)
input_tensor.append(node13)
input_tensor.append(node25)
input_tensor.append(node26)
input_tensor.append(node27)
input_tensor.append(node28)
input_tensor.append(node37)
input_tensor.append(node49)
input_tensor.append(node75)
input_tensor.append(node85)
input_tensor.append(node102)
input_tensor.append(node105)
graph_def = helper.make_graph(node_list, 'test-model', input_tensor, output_tensor, init_tensor)
model = helper.make_model(graph_def, producer_name='onnx-example')
