from onnx import helper
input_tensor = []
output_tensor = []
init_tensor = []
node_list = []

node1 = helper.make_tensor_value_info('node1', 1, [5, 3, 3, 3])
node2 = helper.make_tensor_value_info('node2', 1, [5, 3, 3, 3])
op0 = helper.make_node('ThresholdedRelu', inputs=['node1'], outputs=['node2'], name='op0', alpha=1.0)
node_list.append(op0)
node3 = helper.make_tensor_value_info('node3', 1, [5, 3, 3, 3])
op1 = helper.make_node('Ceil', inputs=['node1'], outputs=['node3'], name='op1')
node_list.append(op1)
node4 = helper.make_tensor_value_info('node4', 1, [2, 4])
node5 = helper.make_tensor_value_info('node5', 1, [4, 1])
node6 = helper.make_tensor_value_info('node6', 1, [2, 1])
op2 = helper.make_node('Gemm', inputs=['node4', 'node5'], outputs=['node6'], name='op2')
node_list.append(op2)
node7 = helper.make_tensor_value_info('node7', 1, [5, 5, 2, 3, 1])
node8 = helper.make_tensor_value_info('node8', 1, [5, 5, 2, 3, 1])
node9 = helper.make_tensor_value_info('node9', 1, [5, 5, 2, 3, 1])
op3 = helper.make_node('PRelu', inputs=['node7', 'node8'], outputs=['node9'], name='op3')
node_list.append(op3)
node10 = helper.make_tensor_value_info('node10', 1, [5, 5, 2, 3, 1])
op4 = helper.make_node('Round', inputs=['node9'], outputs=['node10'], name='op4')
node_list.append(op4)
node11 = helper.make_tensor_value_info('node11', 7, [5])
init_tensor.append(helper.make_tensor('node11', 7, dims=(5,), vals=[4, 0, 0, 2, 0]))
node12 = helper.make_tensor_value_info('node12', 7, [5])
init_tensor.append(helper.make_tensor('node12', 7, dims=(5,), vals=[5, 1, 2, 3, 1]))
node13 = helper.make_tensor_value_info('node13', 7, [5])
init_tensor.append(helper.make_tensor('node13', 7, dims=(5,), vals=[0, 1, 2, 3, 4]))
node14 = helper.make_tensor_value_info('node14', 7, [5])
init_tensor.append(helper.make_tensor('node14', 7, dims=(5,), vals=[3, 2, 3, 2, 1]))
node15 = helper.make_tensor_value_info('node15', 1, [1, 1, 1, 1, 1])
op5 = helper.make_node('Slice', inputs=['node9', 'node11', 'node12', 'node13', 'node14'], outputs=['node15'], name='op5')
node_list.append(op5)
node16 = helper.make_tensor_value_info('node16', 1, [1, 1, 1, 1, 1])
op6 = helper.make_node('Abs', inputs=['node15'], outputs=['node16'], name='op6')
node_list.append(op6)
node17 = helper.make_tensor_value_info('node17', 1, [1, 1, 1, 1, 1])
op7 = helper.make_node('ReduceSumSquare', inputs=['node15'], outputs=['node17'], name='op7', axes=[2, 0, 3, 1])
node_list.append(op7)
node18 = helper.make_tensor_value_info('node18', 1, [1, 1, 1, 1, 1])
op8 = helper.make_node('Conv', inputs=['node16', 'node17'], outputs=['node18'], name='op8', kernel_shape=[1, 1, 1], strides=[1, 1, 1], pads=[0, 0, 0, 0, 0, 0], group=1)
node_list.append(op8)
node19 = helper.make_tensor_value_info('node19', 1, [1, 1, 1, 1, 1])
op9 = helper.make_node('ConvTranspose', inputs=['node18', 'node17'], outputs=['node19'], name='op9', kernel_shape=[1, 1, 1], strides=[1, 1, 1], pads=[0, 0, 0, 0, 0, 0], group=1)
node_list.append(op9)
node20 = helper.make_tensor_value_info('node20', 1, [1, 5])
node21 = helper.make_tensor_value_info('node21', 1, [2, 5])
op10 = helper.make_node('Gemm', inputs=['node6', 'node20'], outputs=['node21'], name='op10')
node_list.append(op10)
node22 = helper.make_tensor_value_info('node22', 1, [2, 5])
op11 = helper.make_node('Ceil', inputs=['node21'], outputs=['node22'], name='op11')
node_list.append(op11)
node23 = helper.make_tensor_value_info('node23', 7, [3])
init_tensor.append(helper.make_tensor('node23', 7, dims=(3,), vals=[5, 2, 1]))
node24 = helper.make_tensor_value_info('node24', 1, [5, 2, 1])
op12 = helper.make_node('Reshape', inputs=['node22', 'node23'], outputs=['node24'], name='op12')
node_list.append(op12)
node25 = helper.make_tensor_value_info('node25', 1, [2])
node26 = helper.make_tensor_value_info('node26', 1, [2])
node27 = helper.make_tensor_value_info('node27', 1, [2])
node28 = helper.make_tensor_value_info('node28', 1, [2])
node29 = helper.make_tensor_value_info('node29', 1, [5, 2, 1])
op13 = helper.make_node('BatchNormalization', inputs=['node24', 'node25', 'node26', 'node27', 'node28'], outputs=['node29'], name='op13')
node_list.append(op13)
node30 = helper.make_tensor_value_info('node30', 1, [2, 1, 1])
node31 = helper.make_tensor_value_info('node31', 1, [5, 1, 1])
op14 = helper.make_node('ConvTranspose', inputs=['node29', 'node30'], outputs=['node31'], name='op14', kernel_shape=[1], strides=[1], pads=[0, 0], group=1)
node_list.append(op14)
node32 = helper.make_tensor_value_info('node32', 1, [5, 2, 1])
node33 = helper.make_tensor_value_info('node33', 1, [5, 2, 1])
op15 = helper.make_node('Max', inputs=['node29', 'node29', 'node29', 'node32', 'node29', 'node29', 'node29', 'node29', 'node29'], outputs=['node33'], name='op15')
node_list.append(op15)
node34 = helper.make_tensor_value_info('node34', 1, [1, 1, 1, 1, 1])
op16 = helper.make_node('ReduceLogSumExp', inputs=['node15'], outputs=['node34'], name='op16', axes=[1, 4, 0, 3, 2])
node_list.append(op16)
node35 = helper.make_tensor_value_info('node35', 7, [2])
init_tensor.append(helper.make_tensor('node35', 7, dims=(2,), vals=[2, 0]))
node36 = helper.make_tensor_value_info('node36', 1, [1, 2, 1])
op17 = helper.make_node('ReduceSum', inputs=['node33', 'node35'], outputs=['node36'], name='op17')
node_list.append(op17)
node37 = helper.make_tensor_value_info('node37', 1, [1, 1, 1, 1, 1])
op18 = helper.make_node('Max', inputs=['node34', 'node34', 'node34', 'node34', 'node34', 'node34'], outputs=['node37'], name='op18')
node_list.append(op18)
node38 = helper.make_tensor_value_info('node38', 1, [1, 2, 1])
op19 = helper.make_node('ReduceL1', inputs=['node36'], outputs=['node38'], name='op19', axes=[2])
node_list.append(op19)
node39 = helper.make_tensor_value_info('node39', 1, [1, 1, 1, 1, 1])
op20 = helper.make_node('Conv', inputs=['node37', 'node37'], outputs=['node39'], name='op20', kernel_shape=[1, 1, 1], strides=[1, 1, 1], pads=[0, 0, 0, 0, 0, 0], group=1)
node_list.append(op20)
node40 = helper.make_tensor_value_info('node40', 1, [1, 1, 1, 1, 1])
op21 = helper.make_node('Sum', inputs=['node39', 'node39', 'node39', 'node39', 'node39'], outputs=['node40'], name='op21')
node_list.append(op21)
node41 = helper.make_tensor_value_info('node41', 1, [1, 1, 1, 1, 1])
op22 = helper.make_node('Mul', inputs=['node40', 'node39'], outputs=['node41'], name='op22')
node_list.append(op22)
node42 = helper.make_tensor_value_info('node42', 1, [1, 1, 1, 1, 1])
op23 = helper.make_node('GlobalMaxPool', inputs=['node40'], outputs=['node42'], name='op23')
node_list.append(op23)
node43 = helper.make_tensor_value_info('node43', 1, [1, 1, 1, 1, 1])
op24 = helper.make_node('Min', inputs=['node42', 'node42', 'node41', 'node41', 'node42', 'node41'], outputs=['node43'], name='op24')
node_list.append(op24)
node44 = helper.make_tensor_value_info('node44', 7, [10])
init_tensor.append(helper.make_tensor('node44', 7, dims=(10,), vals=[2, 2, 1, 0, 2, 2, 2, 1, 1, 2]))
node45 = helper.make_tensor_value_info('node45', 1, [5, 5, 3, 2, 5])
op25 = helper.make_node('Pad', inputs=['node42', 'node44'], outputs=['node45'], name='op25', mode='constant')
node_list.append(op25)
node46 = helper.make_tensor_value_info('node46', 1, [5, 2, 3])
node47 = helper.make_tensor_value_info('node47', 7, [3])
init_tensor.append(helper.make_tensor('node47', 7, dims=(3,), vals=[1, 1, 1]))
node48 = helper.make_tensor_value_info('node48', 1, [5, 2, 3])
op26 = helper.make_node('Expand', inputs=['node46', 'node47'], outputs=['node48'], name='op26')
node_list.append(op26)
node49 = helper.make_tensor_value_info('node49', 1, [5, 2, 1])
op27 = helper.make_node('LpPool', inputs=['node48'], outputs=['node49'], name='op27', kernel_shape=[1], strides=[3], p=2)
node_list.append(op27)
node50 = helper.make_tensor_value_info('node50', 1, [1, 10])
op28 = helper.make_node('Flatten', inputs=['node49'], outputs=['node50'], name='op28', axis=0)
node_list.append(op28)
node51 = helper.make_tensor_value_info('node51', 1, [5, 2, 1])
op29 = helper.make_node('Erf', inputs=['node49'], outputs=['node51'], name='op29')
node_list.append(op29)
node52 = helper.make_tensor_value_info('node52', 1, [3])
node53 = helper.make_tensor_value_info('node53', 1, [3])
op30 = helper.make_node('Sin', inputs=['node52'], outputs=['node53'], name='op30')
node_list.append(op30)
node54 = helper.make_tensor_value_info('node54', 1, [5, 2, 1])
node55 = helper.make_tensor_value_info('node55', 1, [5, 2, 1])
op31 = helper.make_node('Mul', inputs=['node51', 'node54'], outputs=['node55'], name='op31')
node_list.append(op31)
node56 = helper.make_tensor_value_info('node56', 1, [5, 2, 1])
op32 = helper.make_node('Ceil', inputs=['node55'], outputs=['node56'], name='op32')
node_list.append(op32)
node57 = helper.make_tensor_value_info('node57', 1, [5, 2, 1])
op33 = helper.make_node('Round', inputs=['node55'], outputs=['node57'], name='op33')
node_list.append(op33)
node58 = helper.make_tensor_value_info('node58', 1, [5, 2, 1])
op34 = helper.make_node('Exp', inputs=['node56'], outputs=['node58'], name='op34')
node_list.append(op34)
node59 = helper.make_tensor_value_info('node59', 1, [5, 2, 1])
op35 = helper.make_node('Softsign', inputs=['node57'], outputs=['node59'], name='op35')
node_list.append(op35)
node60 = helper.make_tensor_value_info('node60', 1, [5, 1, 1])
op36 = helper.make_node('ReduceMin', inputs=['node58'], outputs=['node60'], name='op36', axes=[1])
node_list.append(op36)
node61 = helper.make_tensor_value_info('node61', 1, [5, 2, 1])
op37 = helper.make_node('Floor', inputs=['node59'], outputs=['node61'], name='op37')
node_list.append(op37)
node62 = helper.make_tensor_value_info('node62', 1, [1, 1, 1])
node63 = helper.make_tensor_value_info('node63', 1, [5, 1, 1])
op38 = helper.make_node('ConvTranspose', inputs=['node60', 'node62'], outputs=['node63'], name='op38', kernel_shape=[1], strides=[1], pads=[0, 0])
node_list.append(op38)
node64 = helper.make_tensor_value_info('node64', 1, [5, 1, 1])
op39 = helper.make_node('Erf', inputs=['node63'], outputs=['node64'], name='op39')
node_list.append(op39)
node65 = helper.make_tensor_value_info('node65', 1, [5, 1, 1])
op40 = helper.make_node('Sum', inputs=['node63', 'node64', 'node64', 'node64'], outputs=['node65'], name='op40')
node_list.append(op40)
node66 = helper.make_tensor_value_info('node66', 1, [5, 1, 1])
op41 = helper.make_node('Cos', inputs=['node65'], outputs=['node66'], name='op41')
node_list.append(op41)
node67 = helper.make_tensor_value_info('node67', 1, [5, 1, 1])
op42 = helper.make_node('LeakyRelu', inputs=['node65'], outputs=['node67'], name='op42')
node_list.append(op42)
node68 = helper.make_tensor_value_info('node68', 1, [1])
node69 = helper.make_tensor_value_info('node69', 1, [1])
node70 = helper.make_tensor_value_info('node70', 1, [1])
node71 = helper.make_tensor_value_info('node71', 1, [1])
node72 = helper.make_tensor_value_info('node72', 1, [5, 1, 1])
op43 = helper.make_node('BatchNormalization', inputs=['node66', 'node68', 'node69', 'node70', 'node71'], outputs=['node72'], name='op43')
node_list.append(op43)
node73 = helper.make_tensor_value_info('node73', 1, [1, 1, 1])
op44 = helper.make_node('ReduceMean', inputs=['node72'], outputs=['node73'], name='op44', axes=[2, 0, 1])
node_list.append(op44)
node74 = helper.make_tensor_value_info('node74', 1, [1, 1, 1])
op45 = helper.make_node('Softsign', inputs=['node73'], outputs=['node74'], name='op45')
node_list.append(op45)
node75 = helper.make_tensor_value_info('node75', 1, [1, 1, 1])
op46 = helper.make_node('Abs', inputs=['node73'], outputs=['node75'], name='op46')
node_list.append(op46)
node76 = helper.make_tensor_value_info('node76', 1, [1])
node77 = helper.make_tensor_value_info('node77', 1, [1])
node78 = helper.make_tensor_value_info('node78', 1, [1])
node79 = helper.make_tensor_value_info('node79', 1, [1])
node80 = helper.make_tensor_value_info('node80', 1, [1, 1, 1])
op47 = helper.make_node('BatchNormalization', inputs=['node74', 'node76', 'node77', 'node78', 'node79'], outputs=['node80'], name='op47')
node_list.append(op47)
node81 = helper.make_tensor_value_info('node81', 1, [5, 3, 3])
node82 = helper.make_tensor_value_info('node82', 1, [5, 3, 3])
op48 = helper.make_node('Sqrt', inputs=['node81'], outputs=['node82'], name='op48')
node_list.append(op48)
node83 = helper.make_tensor_value_info('node83', 1, [1, 1, 1])
op49 = helper.make_node('Identity', inputs=['node80'], outputs=['node83'], name='op49')
node_list.append(op49)
node84 = helper.make_tensor_value_info('node84', 1, [1, 1, 1])
op50 = helper.make_node('Max', inputs=['node83', 'node83', 'node83', 'node83', 'node83', 'node83', 'node83', 'node83', 'node73'], outputs=['node84'], name='op50')
node_list.append(op50)
node85 = helper.make_tensor_value_info('node85', 1, [3])
op51 = helper.make_node('Elu', inputs=['node53'], outputs=['node85'], name='op51', alpha=1.0)
node_list.append(op51)
node86 = helper.make_tensor_value_info('node86', 1, [1, 1, 1])
node87 = helper.make_tensor_value_info('node87', 7, [1])
init_tensor.append(helper.make_tensor('node87', 7, dims=(1,), vals=[1]))
op52 = helper.make_node('Split', inputs=['node84', 'node87'], outputs=['node86'], name='op52', axis=0)
node_list.append(op52)
node88 = helper.make_tensor_value_info('node88', 1, [1])
op53 = helper.make_node('ReduceL1', inputs=['node85'], outputs=['node88'], name='op53', axes=[0])
node_list.append(op53)
node89 = helper.make_tensor_value_info('node89', 1, [1])
op54 = helper.make_node('ReduceMean', inputs=['node88'], outputs=['node89'], name='op54', axes=[0])
node_list.append(op54)
node90 = helper.make_tensor_value_info('node90', 1, [5, 27, 1, 1])
op55 = helper.make_node('SpaceToDepth', inputs=['node1'], outputs=['node90'], name='op55', blocksize=3)
node_list.append(op55)
node91 = helper.make_tensor_value_info('node91', 1, [4])
init_tensor.append(helper.make_tensor('node91', 1, dims=(4,), vals=[1.0, 1.0, 1.0, 1.0]))
node92 = helper.make_tensor_value_info('node92', 1, [8])
init_tensor.append(helper.make_tensor('node92', 1, dims=(1, 8), vals=[0, 0, 0, 0, 1, 1, 1, 1]))
node93 = helper.make_tensor_value_info('node93', 1, [5, 27, 1, 1])
op56 = helper.make_node('Resize', inputs=['node90', 'node92', 'node91'], outputs=['node93'], name='op56', mode='nearest')
node_list.append(op56)
node94 = helper.make_tensor_value_info('node94', 1, [5, 27, 1, 1])
op57 = helper.make_node('Min', inputs=['node90', 'node90', 'node93'], outputs=['node94'], name='op57')
node_list.append(op57)
node95 = helper.make_tensor_value_info('node95', 1, [5, 2, 1])
op58 = helper.make_node('Cos', inputs=['node33'], outputs=['node95'], name='op58')
node_list.append(op58)
node96 = helper.make_tensor_value_info('node96', 7, [4])
init_tensor.append(helper.make_tensor('node96', 7, dims=(4,), vals=[3, 1, 2, 1]))
node97 = helper.make_tensor_value_info('node97', 1, [15, 27, 2, 1])
op59 = helper.make_node('Tile', inputs=['node94', 'node96'], outputs=['node97'], name='op59')
node_list.append(op59)
node98 = helper.make_tensor_value_info('node98', 1, [15, 27, 2, 1])
op60 = helper.make_node('Selu', inputs=['node97'], outputs=['node98'], name='op60')
node_list.append(op60)
node99 = helper.make_tensor_value_info('node99', 7, [2])
init_tensor.append(helper.make_tensor('node99', 7, dims=(2,), vals=[2, 0]))
node100 = helper.make_tensor_value_info('node100', 1, [1, 27, 1, 1])
op61 = helper.make_node('ReduceSum', inputs=['node98', 'node99'], outputs=['node100'], name='op61')
node_list.append(op61)
node101 = helper.make_tensor_value_info('node101', 1, [1, 27, 1, 1])
node102 = helper.make_tensor_value_info('node102', 7, [1])
init_tensor.append(helper.make_tensor('node102', 7, dims=(1,), vals=[1]))
op62 = helper.make_node('Split', inputs=['node100', 'node102'], outputs=['node101'], name='op62')
node_list.append(op62)
node103 = helper.make_tensor_value_info('node103', 1, [1, 27, 1, 1])
op63 = helper.make_node('Relu', inputs=['node101'], outputs=['node103'], name='op63')
node_list.append(op63)
node104 = helper.make_tensor_value_info('node104', 1, [3, 5, 4])
node105 = helper.make_tensor_value_info('node105', 1, [3, 5, 4])
op64 = helper.make_node('Erf', inputs=['node104'], outputs=['node105'], name='op64')
node_list.append(op64)
node106 = helper.make_tensor_value_info('node106', 1, [1, 1, 1, 1])
op65 = helper.make_node('ReduceProd', inputs=['node103'], outputs=['node106'], name='op65', axes=[1, 2])
node_list.append(op65)
node107 = helper.make_tensor_value_info('node107', 1, [3, 5, 4])
op66 = helper.make_node('Erf', inputs=['node105'], outputs=['node107'], name='op66')
node_list.append(op66)
node108 = helper.make_tensor_value_info('node108', 1, [3])
op67 = helper.make_node('Elu', inputs=['node53'], outputs=['node108'], name='op67')
node_list.append(op67)
node109 = helper.make_tensor_value_info('node109', 1, [1, 3])
op68 = helper.make_node('Flatten', inputs=['node108'], outputs=['node109'], name='op68', axis=0)
node_list.append(op68)
node110 = helper.make_tensor_value_info('node110', 1, [1])
node111 = helper.make_tensor_value_info('node111', 1, [1])
node112 = helper.make_tensor_value_info('node112', 1, [1])
node113 = helper.make_tensor_value_info('node113', 7, [3])
init_tensor.append(helper.make_tensor('node113', 7, dims=(3,), vals=[1, 1, 1]))
op69 = helper.make_node('Split', inputs=['node108', 'node113'], outputs=['node110', 'node111', 'node112'], name='op69', axis=0)
node_list.append(op69)
node114 = helper.make_tensor_value_info('node114', 1, [1, 1])
op70 = helper.make_node('Flatten', inputs=['node112'], outputs=['node114'], name='op70', axis=0)
node_list.append(op70)
node115 = helper.make_tensor_value_info('node115', 1, [5, 4, 4])
node116 = helper.make_tensor_value_info('node116', 1, [5, 4, 4])
node117 = helper.make_tensor_value_info('node117', 1, [5, 4, 4])
op71 = helper.make_node('PRelu', inputs=['node115', 'node116'], outputs=['node117'], name='op71')
node_list.append(op71)
node118 = helper.make_tensor_value_info('node118', 7, [5, 5])
init_tensor.append(helper.make_tensor('node118', 7, dims=(5, 5), vals=[3, 1, 0, 1, 2, 3, 0, 0, 1, 1, 0, 0, 1, 1, 3, 1, 2, 0, 2, 1, 2, 2, 3, 1, 2]))
node119 = helper.make_tensor_value_info('node119', 1, [5, 4, 5, 5])
op72 = helper.make_node('Gather', inputs=['node117', 'node118'], outputs=['node119'], name='op72', axis=2)
node_list.append(op72)
node120 = helper.make_tensor_value_info('node120', 1, [5, 4, 5, 5])
op73 = helper.make_node('Sigmoid', inputs=['node119'], outputs=['node120'], name='op73')
node_list.append(op73)
node121 = helper.make_tensor_value_info('node121', 1, [1, 1, 1, 1])
op74 = helper.make_node('ReduceMax', inputs=['node120'], outputs=['node121'], name='op74', axes=[2, 1, 0, 3])
node_list.append(op74)
node122 = helper.make_tensor_value_info('node122', 1, [5, 1, 1])
op75 = helper.make_node('ReduceMean', inputs=['node51'], outputs=['node122'], name='op75', axes=[1])
node_list.append(op75)
node123 = helper.make_tensor_value_info('node123', 1, [3])
op76 = helper.make_node('Elu', inputs=['node53'], outputs=['node123'], name='op76', alpha=0.5)
node_list.append(op76)
node124 = helper.make_tensor_value_info('node124', 1, [3])
op77 = helper.make_node('Floor', inputs=['node123'], outputs=['node124'], name='op77')
node_list.append(op77)
node125 = helper.make_tensor_value_info('node125', 1, [3])
op78 = helper.make_node('Min', inputs=['node123', 'node123'], outputs=['node125'], name='op78')
node_list.append(op78)
node126 = helper.make_tensor_value_info('node126', 1, [3])
op79 = helper.make_node('Sin', inputs=['node124'], outputs=['node126'], name='op79')
node_list.append(op79)
node127 = helper.make_tensor_value_info('node127', 1, [3])
node128 = helper.make_tensor_value_info('node128', 1, [3])
op80 = helper.make_node('Max', inputs=['node125', 'node126', 'node127', 'node125', 'node126', 'node126'], outputs=['node128'], name='op80')
node_list.append(op80)
output_tensor.append(node82)
output_tensor.append(node10)
output_tensor.append(node38)
output_tensor.append(node50)
output_tensor.append(node95)
output_tensor.append(node31)
output_tensor.append(node121)
output_tensor.append(node86)
output_tensor.append(node128)
output_tensor.append(node114)
output_tensor.append(node45)
output_tensor.append(node110)
output_tensor.append(node122)
output_tensor.append(node89)
output_tensor.append(node61)
output_tensor.append(node2)
output_tensor.append(node3)
output_tensor.append(node107)
output_tensor.append(node106)
output_tensor.append(node109)
output_tensor.append(node111)
output_tensor.append(node19)
output_tensor.append(node67)
output_tensor.append(node75)
output_tensor.append(node43)
input_tensor.append(node1)
input_tensor.append(node4)
input_tensor.append(node5)
input_tensor.append(node7)
input_tensor.append(node8)
input_tensor.append(node20)
input_tensor.append(node25)
input_tensor.append(node26)
input_tensor.append(node27)
input_tensor.append(node28)
input_tensor.append(node30)
input_tensor.append(node32)
input_tensor.append(node46)
input_tensor.append(node52)
input_tensor.append(node54)
input_tensor.append(node62)
input_tensor.append(node68)
input_tensor.append(node69)
input_tensor.append(node70)
input_tensor.append(node71)
input_tensor.append(node76)
input_tensor.append(node77)
input_tensor.append(node78)
input_tensor.append(node79)
input_tensor.append(node81)
input_tensor.append(node104)
input_tensor.append(node115)
input_tensor.append(node116)
input_tensor.append(node127)
graph_def = helper.make_graph(node_list, 'test-model', input_tensor, output_tensor, init_tensor)
model = helper.make_model(graph_def, producer_name='onnx-example')
