from onnx import helper
input_tensor = []
output_tensor = []
init_tensor = []
node_list = []

node1 = helper.make_tensor_value_info('node1', 1, [3, 3, 2, 4, 2])
node2 = helper.make_tensor_value_info('node2', 1, [1, 3, 1, 1, 1])
op0 = helper.make_node('ReduceLogSumExp', inputs=['node1'], outputs=['node2'], name='op0', axes=[0, 2, 3, 4])
node_list.append(op0)
node3 = helper.make_tensor_value_info('node3', 1, [1, 3, 1, 5, 1])
node4 = helper.make_tensor_value_info('node4', 1, [1, 3, 1, 4, 1])
node5 = helper.make_tensor_value_info('node5', 1, [1, 3, 1, 3, 1])
node6 = helper.make_tensor_value_info('node6', 1, [1, 3, 1, 14, 1])
op1 = helper.make_node('Concat', inputs=['node2', 'node3', 'node2', 'node4', 'node5'], outputs=['node6'], name='op1', axis=3)
node_list.append(op1)
node7 = helper.make_tensor_value_info('node7', 1, [1, 3, 1, 1, 1])
op2 = helper.make_node('Sin', inputs=['node2'], outputs=['node7'], name='op2')
node_list.append(op2)
node8 = helper.make_tensor_value_info('node8', 1, [1, 1, 1, 1, 1])
op3 = helper.make_node('ReduceSumSquare', inputs=['node7'], outputs=['node8'], name='op3', axes=[4, 1, 2, 3, 0])
node_list.append(op3)
node9 = helper.make_tensor_value_info('node9', 1, [3, 1])
op4 = helper.make_node('Flatten', inputs=['node7'], outputs=['node9'], name='op4', axis=4)
node_list.append(op4)
node10 = helper.make_tensor_value_info('node10', 7, [1])
init_tensor.append(helper.make_tensor('node10', 7, dims=(1,), vals=[1]))
node11 = helper.make_tensor_value_info('node11', 1, [3, 1, 1])
op5 = helper.make_node('Unsqueeze', inputs=['node9', 'node10'], outputs=['node11'], name='op5')
node_list.append(op5)
node12 = helper.make_tensor_value_info('node12', 7, [2])
init_tensor.append(helper.make_tensor('node12', 7, dims=(2,), vals=[1, 1]))
node13 = helper.make_tensor_value_info('node13', 1, [3, 1])
op6 = helper.make_node('Expand', inputs=['node9', 'node12'], outputs=['node13'], name='op6')
node_list.append(op6)
node14 = helper.make_tensor_value_info('node14', 1, [3, 1])
op7 = helper.make_node('Mul', inputs=['node13', 'node13'], outputs=['node14'], name='op7')
node_list.append(op7)
node15 = helper.make_tensor_value_info('node15', 1, [1, 3])
node16 = helper.make_tensor_value_info('node16', 1, [3, 3])
op8 = helper.make_node('MatMul', inputs=['node13', 'node15'], outputs=['node16'], name='op8')
node_list.append(op8)
node17 = helper.make_tensor_value_info('node17', 1, [3, 3])
op9 = helper.make_node('Cos', inputs=['node16'], outputs=['node17'], name='op9')
node_list.append(op9)
node18 = helper.make_tensor_value_info('node18', 7, [2])
init_tensor.append(helper.make_tensor('node18', 7, dims=(2,), vals=[3, 1]))
node19 = helper.make_tensor_value_info('node19', 1, [9, 3])
op10 = helper.make_node('Tile', inputs=['node17', 'node18'], outputs=['node19'], name='op10')
node_list.append(op10)
node20 = helper.make_tensor_value_info('node20', 7, [1])
init_tensor.append(helper.make_tensor('node20', 7, dims=(1,), vals=[1]))
node21 = helper.make_tensor_value_info('node21', 1, [3, 1, 3])
op11 = helper.make_node('Unsqueeze', inputs=['node17', 'node20'], outputs=['node21'], name='op11')
node_list.append(op11)
node22 = helper.make_tensor_value_info('node22', 1, [3, 1, 3])
op12 = helper.make_node('Div', inputs=['node21', 'node21'], outputs=['node22'], name='op12')
node_list.append(op12)
node23 = helper.make_tensor_value_info('node23', 1, [3, 1, 1])
op13 = helper.make_node('GlobalAveragePool', inputs=['node21'], outputs=['node23'], name='op13')
node_list.append(op13)
node24 = helper.make_tensor_value_info('node24', 1, [3, 1, 3])
op14 = helper.make_node('ReduceMax', inputs=['node22'], outputs=['node24'], name='op14', axes=[1])
node_list.append(op14)
node25 = helper.make_tensor_value_info('node25', 1, [3, 1, 3])
op15 = helper.make_node('Relu', inputs=['node24'], outputs=['node25'], name='op15')
node_list.append(op15)
node26 = helper.make_tensor_value_info('node26', 1, [3, 1, 3])
op16 = helper.make_node('Exp', inputs=['node25'], outputs=['node26'], name='op16')
node_list.append(op16)
node27 = helper.make_tensor_value_info('node27', 7, [1])
init_tensor.append(helper.make_tensor('node27', 7, dims=(1,), vals=[9]))
node28 = helper.make_tensor_value_info('node28', 1, [9])
op17 = helper.make_node('Reshape', inputs=['node26', 'node27'], outputs=['node28'], name='op17')
node_list.append(op17)
node29 = helper.make_tensor_value_info('node29', 1, [1, 4])
node30 = helper.make_tensor_value_info('node30', 1, [3, 4])
op18 = helper.make_node('Gemm', inputs=['node13', 'node29'], outputs=['node30'], name='op18')
node_list.append(op18)
node31 = helper.make_tensor_value_info('node31', 1, [3, 4])
op19 = helper.make_node('Mean', inputs=['node30', 'node30', 'node30', 'node30', 'node30', 'node30'], outputs=['node31'], name='op19')
node_list.append(op19)
node32 = helper.make_tensor_value_info('node32', 1, [3, 4])
op20 = helper.make_node('Softsign', inputs=['node31'], outputs=['node32'], name='op20')
node_list.append(op20)
node33 = helper.make_tensor_value_info('node33', 1, [3, 1])
op21 = helper.make_node('ReduceSumSquare', inputs=['node32'], outputs=['node33'], name='op21', axes=[1])
node_list.append(op21)
node34 = helper.make_tensor_value_info('node34', 1, [1, 1])
op22 = helper.make_node('ReduceSumSquare', inputs=['node33'], outputs=['node34'], name='op22', axes=[0])
node_list.append(op22)
node35 = helper.make_tensor_value_info('node35', 7, [2])
init_tensor.append(helper.make_tensor('node35', 7, dims=(2,), vals=[1, 3]))
node36 = helper.make_tensor_value_info('node36', 1, [1, 3])
op23 = helper.make_node('Reshape', inputs=['node33', 'node35'], outputs=['node36'], name='op23')
node_list.append(op23)
node37 = helper.make_tensor_value_info('node37', 1, [3, 1, 1])
op24 = helper.make_node('AveragePool', inputs=['node22'], outputs=['node37'], name='op24', kernel_shape=[3], strides=[2])
node_list.append(op24)
node38 = helper.make_tensor_value_info('node38', 1, [3, 1, 1])
op25 = helper.make_node('Sum', inputs=['node37', 'node37', 'node23', 'node37'], outputs=['node38'], name='op25')
node_list.append(op25)
node39 = helper.make_tensor_value_info('node39', 1, [4, 3, 5, 1, 2])
node40 = helper.make_tensor_value_info('node40', 1, [4, 3, 5, 1, 2])
op26 = helper.make_node('Cos', inputs=['node39'], outputs=['node40'], name='op26')
node_list.append(op26)
node41 = helper.make_tensor_value_info('node41', 1, [4, 3, 5, 1, 2])
node42 = helper.make_tensor_value_info('node42', 1, [4, 3, 5, 1, 2])
op27 = helper.make_node('Max', inputs=['node40', 'node40', 'node40', 'node40', 'node41', 'node40', 'node40', 'node40', 'node40', 'node40'], outputs=['node42'], name='op27')
node_list.append(op27)
node43 = helper.make_tensor_value_info('node43', 1, [4, 1])
node44 = helper.make_tensor_value_info('node44', 1, [4, 1])
op28 = helper.make_node('Neg', inputs=['node43'], outputs=['node44'], name='op28')
node_list.append(op28)
node45 = helper.make_tensor_value_info('node45', 1, [3])
node46 = helper.make_tensor_value_info('node46', 1, [3])
node47 = helper.make_tensor_value_info('node47', 1, [3])
node48 = helper.make_tensor_value_info('node48', 1, [3])
node49 = helper.make_tensor_value_info('node49', 1, [4, 3, 5, 1, 2])
op29 = helper.make_node('BatchNormalization', inputs=['node42', 'node45', 'node46', 'node47', 'node48'], outputs=['node49'], name='op29')
node_list.append(op29)
node50 = helper.make_tensor_value_info('node50', 1, [4, 3, 5, 1, 2])
op30 = helper.make_node('Softsign', inputs=['node49'], outputs=['node50'], name='op30')
node_list.append(op30)
node51 = helper.make_tensor_value_info('node51', 7, [10])
init_tensor.append(helper.make_tensor('node51', 7, dims=(10,), vals=[2, 0, 0, 1, 1, 0, 2, 0, 0, 2]))
node52 = helper.make_tensor_value_info('node52', 1, [6, 5, 5, 2, 5])
op31 = helper.make_node('Pad', inputs=['node50', 'node51'], outputs=['node52'], name='op31', mode='constant')
node_list.append(op31)
node53 = helper.make_tensor_value_info('node53', 1, [6, 5, 5, 2, 5])
op32 = helper.make_node('Erf', inputs=['node52'], outputs=['node53'], name='op32')
node_list.append(op32)
node54 = helper.make_tensor_value_info('node54', 1, [6, 5, 5, 2, 5])
op33 = helper.make_node('Min', inputs=['node52', 'node53', 'node52', 'node52', 'node52', 'node53', 'node52', 'node52', 'node53'], outputs=['node54'], name='op33')
node_list.append(op33)
node55 = helper.make_tensor_value_info('node55', 1, [6, 5, 5, 2, 5])
op34 = helper.make_node('Softsign', inputs=['node54'], outputs=['node55'], name='op34')
node_list.append(op34)
node56 = helper.make_tensor_value_info('node56', 1, [3, 2, 1])
node57 = helper.make_tensor_value_info('node57', 1, [3, 2, 1])
op35 = helper.make_node('Dropout', inputs=['node56'], outputs=['node57'], name='op35')
node_list.append(op35)
node58 = helper.make_tensor_value_info('node58', 1, [6, 5, 2, 2, 2])
op36 = helper.make_node('AveragePool', inputs=['node55'], outputs=['node58'], name='op36', kernel_shape=[2, 1, 4], strides=[2, 1, 1])
node_list.append(op36)
node59 = helper.make_tensor_value_info('node59', 1, [6, 5, 2, 2, 2])
node60 = helper.make_tensor_value_info('node60', 1, [6, 5, 2, 2, 2])
op37 = helper.make_node('Min', inputs=['node58', 'node58', 'node59', 'node58', 'node58', 'node58', 'node58', 'node58', 'node58'], outputs=['node60'], name='op37')
node_list.append(op37)
node61 = helper.make_tensor_value_info('node61', 1, [6, 5, 2, 2, 2])
op38 = helper.make_node('MatMul', inputs=['node58', 'node58'], outputs=['node61'], name='op38')
node_list.append(op38)
node62 = helper.make_tensor_value_info('node62', 1, [6, 5, 2, 2, 2])
op39 = helper.make_node('Div', inputs=['node60', 'node60'], outputs=['node62'], name='op39')
node_list.append(op39)
node63 = helper.make_tensor_value_info('node63', 1, [3, 1])
op40 = helper.make_node('Gemm', inputs=['node32', 'node44'], outputs=['node63'], name='op40')
node_list.append(op40)
node64 = helper.make_tensor_value_info('node64', 1, [6, 5, 2, 2, 2])
op41 = helper.make_node('Tanh', inputs=['node62'], outputs=['node64'], name='op41')
node_list.append(op41)
node65 = helper.make_tensor_value_info('node65', 1, [6, 5, 2, 2, 2])
op42 = helper.make_node('Exp', inputs=['node61'], outputs=['node65'], name='op42')
node_list.append(op42)
node66 = helper.make_tensor_value_info('node66', 1, [6, 5, 2, 2, 2])
op43 = helper.make_node('Reciprocal', inputs=['node64'], outputs=['node66'], name='op43')
node_list.append(op43)
node67 = helper.make_tensor_value_info('node67', 7, [5])
init_tensor.append(helper.make_tensor('node67', 7, dims=(5,), vals=[1, 1, 1, 1, 0]))
node68 = helper.make_tensor_value_info('node68', 7, [5])
init_tensor.append(helper.make_tensor('node68', 7, dims=(5,), vals=[3, 3, 2, 2, 1]))
node69 = helper.make_tensor_value_info('node69', 7, [5])
init_tensor.append(helper.make_tensor('node69', 7, dims=(5,), vals=[0, 1, 2, 3, 4]))
node70 = helper.make_tensor_value_info('node70', 7, [5])
init_tensor.append(helper.make_tensor('node70', 7, dims=(5,), vals=[1, 1, 3, 3, 1]))
node71 = helper.make_tensor_value_info('node71', 1, [2, 2, 1, 1, 1])
op44 = helper.make_node('Slice', inputs=['node65', 'node67', 'node68', 'node69', 'node70'], outputs=['node71'], name='op44')
node_list.append(op44)
node72 = helper.make_tensor_value_info('node72', 7, [2])
init_tensor.append(helper.make_tensor('node72', 7, dims=(2,), vals=[0, 4]))
node73 = helper.make_tensor_value_info('node73', 1, [1, 3, 1, 1, 1])
op45 = helper.make_node('Unsqueeze', inputs=['node38', 'node72'], outputs=['node73'], name='op45')
node_list.append(op45)
node74 = helper.make_tensor_value_info('node74', 7, [2])
init_tensor.append(helper.make_tensor('node74', 7, dims=(2,), vals=[1, 4]))
node75 = helper.make_tensor_value_info('node75', 1, [1, 4])
op46 = helper.make_node('Reshape', inputs=['node71', 'node74'], outputs=['node75'], name='op46')
node_list.append(op46)
node76 = helper.make_tensor_value_info('node76', 1, [1, 1, 1, 1, 1])
op47 = helper.make_node('ReduceL1', inputs=['node73'], outputs=['node76'], name='op47', axes=[4, 0, 3, 2, 1])
node_list.append(op47)
node77 = helper.make_tensor_value_info('node77', 1, [1, 1, 1, 1, 1])
node78 = helper.make_tensor_value_info('node78', 1, [1, 1, 1, 1, 1])
op48 = helper.make_node('Add', inputs=['node76', 'node77'], outputs=['node78'], name='op48')
node_list.append(op48)
node79 = helper.make_tensor_value_info('node79', 1, [1, 1, 1, 1, 1])
op49 = helper.make_node('MaxPool', inputs=['node78'], outputs=['node79'], name='op49', kernel_shape=[1, 1, 1], strides=[1, 1, 1])
node_list.append(op49)
node80 = helper.make_tensor_value_info('node80', 1, [1, 1, 1, 1, 1])
op50 = helper.make_node('ReduceSumSquare', inputs=['node79'], outputs=['node80'], name='op50', axes=[4, 2, 3, 1, 0])
node_list.append(op50)
output_tensor.append(node75)
output_tensor.append(node8)
output_tensor.append(node6)
output_tensor.append(node11)
output_tensor.append(node63)
output_tensor.append(node28)
output_tensor.append(node80)
output_tensor.append(node36)
output_tensor.append(node66)
output_tensor.append(node57)
output_tensor.append(node34)
output_tensor.append(node14)
output_tensor.append(node19)
input_tensor.append(node1)
input_tensor.append(node3)
input_tensor.append(node4)
input_tensor.append(node5)
input_tensor.append(node15)
input_tensor.append(node29)
input_tensor.append(node39)
input_tensor.append(node41)
input_tensor.append(node43)
input_tensor.append(node45)
input_tensor.append(node46)
input_tensor.append(node47)
input_tensor.append(node48)
input_tensor.append(node56)
input_tensor.append(node59)
input_tensor.append(node77)
graph_def = helper.make_graph(node_list, 'test-model', input_tensor, output_tensor, init_tensor)
model = helper.make_model(graph_def, producer_name='onnx-example')
