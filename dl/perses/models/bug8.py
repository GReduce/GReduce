from onnx import helper
input_tensor = []
output_tensor = []
init_tensor = []
node_list = []

node1 = helper.make_tensor_value_info('node1', 1, [3, 5, 2, 5, 1])
node2 = helper.make_tensor_value_info('node2', 1, [3, 5, 2, 5, 1])
op0 = helper.make_node('Dropout', inputs=['node1'], outputs=['node2'], name='op0')
node_list.append(op0)
node3 = helper.make_tensor_value_info('node3', 1, [1, 1, 1, 5, 1])
op1 = helper.make_node('ReduceProd', inputs=['node2'], outputs=['node3'], name='op1', axes=[1, 0, 2])
node_list.append(op1)
node4 = helper.make_tensor_value_info('node4', 1, [3, 5, 2, 5, 1])
op2 = helper.make_node('Neg', inputs=['node2'], outputs=['node4'], name='op2')
node_list.append(op2)
node5 = helper.make_tensor_value_info('node5', 1, [3, 5, 1, 5, 1])
node6 = helper.make_tensor_value_info('node6', 1, [3, 3, 2, 1, 1])
op3 = helper.make_node('Conv', inputs=['node4', 'node5'], outputs=['node6'], name='op3', kernel_shape=[1, 5, 1], strides=[1, 4, 1], pads=[0, 0, 0, 0, 0, 0], group=1)
node_list.append(op3)
node7 = helper.make_tensor_value_info('node7', 1, [3, 5, 2, 5, 1])
op4 = helper.make_node('Relu', inputs=['node4'], outputs=['node7'], name='op4')
node_list.append(op4)
node8 = helper.make_tensor_value_info('node8', 1, [3, 5, 2, 5, 1])
node9 = helper.make_tensor_value_info('node9', 1, [3, 5, 2, 5, 1])
op5 = helper.make_node('Min', inputs=['node7', 'node7', 'node7', 'node8', 'node7', 'node7', 'node7', 'node7', 'node7', 'node7'], outputs=['node9'], name='op5')
node_list.append(op5)
node10 = helper.make_tensor_value_info('node10', 1, [3, 5, 2, 5, 1])
op6 = helper.make_node('Div', inputs=['node7', 'node7'], outputs=['node10'], name='op6')
node_list.append(op6)
node11 = helper.make_tensor_value_info('node11', 7, [5])
init_tensor.append(helper.make_tensor('node11', 7, dims=(5,), vals=[1, 1, 1, 1, 1]))
node12 = helper.make_tensor_value_info('node12', 1, [3, 5, 2, 5, 1])
op7 = helper.make_node('Expand', inputs=['node10', 'node11'], outputs=['node12'], name='op7')
node_list.append(op7)
node13 = helper.make_tensor_value_info('node13', 1, [3, 5, 2, 5, 1])
op8 = helper.make_node('Add', inputs=['node12', 'node10'], outputs=['node13'], name='op8')
node_list.append(op8)
node14 = helper.make_tensor_value_info('node14', 1, [3, 5, 2, 5, 1])
op9 = helper.make_node('Sum', inputs=['node13', 'node13', 'node12', 'node12'], outputs=['node14'], name='op9')
node_list.append(op9)
node15 = helper.make_tensor_value_info('node15', 1, [3, 5, 2, 5, 1])
op10 = helper.make_node('Sqrt', inputs=['node14'], outputs=['node15'], name='op10')
node_list.append(op10)
node16 = helper.make_tensor_value_info('node16', 1, [3, 5, 2, 5, 1])
op11 = helper.make_node('Floor', inputs=['node14'], outputs=['node16'], name='op11')
node_list.append(op11)
node17 = helper.make_tensor_value_info('node17', 1, [3, 5, 2, 5, 1])
op12 = helper.make_node('Erf', inputs=['node16'], outputs=['node17'], name='op12')
node_list.append(op12)
node18 = helper.make_tensor_value_info('node18', 1, [3, 5, 1, 1, 1])
op13 = helper.make_node('MaxPool', inputs=['node16'], outputs=['node18'], name='op13', kernel_shape=[1, 5, 1], strides=[2, 2, 1])
node_list.append(op13)
node19 = helper.make_tensor_value_info('node19', 1, [4, 5, 3, 4])
node20 = helper.make_tensor_value_info('node20', 1, [4, 5, 3, 4])
op14 = helper.make_node('SpaceToDepth', inputs=['node19'], outputs=['node20'], name='op14', blocksize=1)
node_list.append(op14)
node21 = helper.make_tensor_value_info('node21', 1, [4, 5, 4, 2])
node22 = helper.make_tensor_value_info('node22', 1, [4, 5, 3, 2])
op15 = helper.make_node('MatMul', inputs=['node20', 'node21'], outputs=['node22'], name='op15')
node_list.append(op15)
node23 = helper.make_tensor_value_info('node23', 1, [4, 5, 3, 4])
op16 = helper.make_node('Add', inputs=['node20', 'node20'], outputs=['node23'], name='op16')
node_list.append(op16)
node24 = helper.make_tensor_value_info('node24', 1, [4, 5, 3, 4])
op17 = helper.make_node('Sum', inputs=['node23', 'node23', 'node23', 'node23', 'node23'], outputs=['node24'], name='op17')
node_list.append(op17)
node25 = helper.make_tensor_value_info('node25', 1, [20, 12])
op18 = helper.make_node('Flatten', inputs=['node23'], outputs=['node25'], name='op18', axis=2)
node_list.append(op18)
node26 = helper.make_tensor_value_info('node26', 1, [1, 1])
op19 = helper.make_node('ReduceMean', inputs=['node25'], outputs=['node26'], name='op19', axes=[0, 1])
node_list.append(op19)
node27 = helper.make_tensor_value_info('node27', 1, [20, 12])
op20 = helper.make_node('Sqrt', inputs=['node25'], outputs=['node27'], name='op20')
node_list.append(op20)
node28 = helper.make_tensor_value_info('node28', 1, [1, 1])
op21 = helper.make_node('ReduceSumSquare', inputs=['node26'], outputs=['node28'], name='op21', axes=[0])
node_list.append(op21)
node29 = helper.make_tensor_value_info('node29', 1, [1, 1])
op22 = helper.make_node('Erf', inputs=['node28'], outputs=['node29'], name='op22')
node_list.append(op22)
node30 = helper.make_tensor_value_info('node30', 1, [2, 1])
node31 = helper.make_tensor_value_info('node31', 1, [5, 1])
node32 = helper.make_tensor_value_info('node32', 1, [5, 1])
node33 = helper.make_tensor_value_info('node33', 1, [3, 1])
node34 = helper.make_tensor_value_info('node34', 1, [5, 1])
node35 = helper.make_tensor_value_info('node35', 1, [25, 1])
op23 = helper.make_node('Concat', inputs=['node28', 'node28', 'node30', 'node28', 'node31', 'node32', 'node33', 'node29', 'node34', 'node29'], outputs=['node35'], name='op23', axis=0)
node_list.append(op23)
node36 = helper.make_tensor_value_info('node36', 1, [1, 1])
op24 = helper.make_node('Erf', inputs=['node29'], outputs=['node36'], name='op24')
node_list.append(op24)
node37 = helper.make_tensor_value_info('node37', 1, [1, 1])
op25 = helper.make_node('ReduceMin', inputs=['node36'], outputs=['node37'], name='op25', axes=[1, 0])
node_list.append(op25)
node38 = helper.make_tensor_value_info('node38', 1, [3, 5, 1, 1, 1])
op26 = helper.make_node('GlobalMaxPool', inputs=['node9'], outputs=['node38'], name='op26')
node_list.append(op26)
node39 = helper.make_tensor_value_info('node39', 7, [5])
init_tensor.append(helper.make_tensor('node39', 7, dims=(5,), vals=[1, 15, 1, 1, 1]))
node40 = helper.make_tensor_value_info('node40', 1, [1, 15, 1, 1, 1])
op27 = helper.make_node('Reshape', inputs=['node38', 'node39'], outputs=['node40'], name='op27')
node_list.append(op27)
node41 = helper.make_tensor_value_info('node41', 1, [1, 5, 1, 1, 1])
op28 = helper.make_node('ReduceProd', inputs=['node38'], outputs=['node41'], name='op28', axes=[0])
node_list.append(op28)
node42 = helper.make_tensor_value_info('node42', 1, [1, 1, 1, 1, 1])
op29 = helper.make_node('ReduceL1', inputs=['node40'], outputs=['node42'], name='op29', axes=[3, 0, 1, 4, 2])
node_list.append(op29)
node43 = helper.make_tensor_value_info('node43', 1, [1, 1, 1, 1, 1])
node44 = helper.make_tensor_value_info('node44', 1, [1, 1, 1, 1, 1])
op30 = helper.make_node('Mean', inputs=['node42', 'node43', 'node42', 'node42', 'node42', 'node42', 'node42', 'node42', 'node42', 'node42'], outputs=['node44'], name='op30')
node_list.append(op30)
node45 = helper.make_tensor_value_info('node45', 1, [1, 1, 1, 1, 1])
op31 = helper.make_node('ReduceL1', inputs=['node44'], outputs=['node45'], name='op31', axes=[0])
node_list.append(op31)
output_tensor.append(node15)
output_tensor.append(node3)
output_tensor.append(node22)
output_tensor.append(node27)
output_tensor.append(node17)
output_tensor.append(node18)
output_tensor.append(node41)
output_tensor.append(node37)
output_tensor.append(node35)
output_tensor.append(node45)
output_tensor.append(node6)
output_tensor.append(node24)
input_tensor.append(node1)
input_tensor.append(node5)
input_tensor.append(node8)
input_tensor.append(node19)
input_tensor.append(node21)
input_tensor.append(node30)
input_tensor.append(node31)
input_tensor.append(node32)
input_tensor.append(node33)
input_tensor.append(node34)
input_tensor.append(node43)
graph_def = helper.make_graph(node_list, 'test-model', input_tensor, output_tensor, init_tensor)
model = helper.make_model(graph_def, producer_name='onnx-example')
