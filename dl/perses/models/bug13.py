from onnx import helper
input_tensor = []
output_tensor = []
init_tensor = []
node_list = []

node1 = helper.make_tensor_value_info('node1', 1, [3, 5])
node2 = helper.make_tensor_value_info('node2', 1, [4, 4, 4, 5])
node3 = helper.make_tensor_value_info('node3', 1, [4, 4, 4, 5])
node4 = helper.make_tensor_value_info('node4', 1, [4, 4, 4, 5])
op0 = helper.make_node('Mul', inputs=['node2', 'node3'], outputs=['node4'], name='op0')
node_list.append(op0)
node5 = helper.make_tensor_value_info('node5', 1, [4, 4, 4, 5])
op1 = helper.make_node('Tanh', inputs=['node4'], outputs=['node5'], name='op1')
node_list.append(op1)
node6 = helper.make_tensor_value_info('node6', 1, [4])
node7 = helper.make_tensor_value_info('node7', 1, [4])
node8 = helper.make_tensor_value_info('node8', 1, [4])
node9 = helper.make_tensor_value_info('node9', 1, [4])
node10 = helper.make_tensor_value_info('node10', 1, [4, 4, 4, 5])
op2 = helper.make_node('BatchNormalization', inputs=['node5', 'node6', 'node7', 'node8', 'node9'], outputs=['node10'], name='op2')
node_list.append(op2)
node11 = helper.make_tensor_value_info('node11', 1, [4, 4, 4, 5])
op3 = helper.make_node('Round', inputs=['node10'], outputs=['node11'], name='op3')
node_list.append(op3)
node12 = helper.make_tensor_value_info('node12', 1, [4, 4, 4, 5])
op4 = helper.make_node('Mul', inputs=['node10', 'node11'], outputs=['node12'], name='op4')
node_list.append(op4)
node13 = helper.make_tensor_value_info('node13', 1, [4, 4, 1, 1])
op5 = helper.make_node('GlobalMaxPool', inputs=['node12'], outputs=['node13'], name='op5')
node_list.append(op5)
node14 = helper.make_tensor_value_info('node14', 1, [4, 1, 4, 5])
op6 = helper.make_node('ReduceL1', inputs=['node12'], outputs=['node14'], name='op6', axes=[1])
node_list.append(op6)
node15 = helper.make_tensor_value_info('node15', 1, [4, 1, 4, 5])
op7 = helper.make_node('Floor', inputs=['node14'], outputs=['node15'], name='op7')
node_list.append(op7)
node16 = helper.make_tensor_value_info('node16', 1, [4, 1, 1, 1])
op8 = helper.make_node('MaxPool', inputs=['node15'], outputs=['node16'], name='op8', kernel_shape=[2, 5], strides=[3, 2])
node_list.append(op8)
node17 = helper.make_tensor_value_info('node17', 1, [4, 1, 4, 5])
op9 = helper.make_node('Selu', inputs=['node15'], outputs=['node17'], name='op9')
node_list.append(op9)
node18 = helper.make_tensor_value_info('node18', 1, [4, 1, 1, 1])
op10 = helper.make_node('Round', inputs=['node16'], outputs=['node18'], name='op10')
node_list.append(op10)
node19 = helper.make_tensor_value_info('node19', 1, [4, 1, 4, 5])
op11 = helper.make_node('Mean', inputs=['node17', 'node17'], outputs=['node19'], name='op11')
node_list.append(op11)
node20 = helper.make_tensor_value_info('node20', 1, [4, 1, 3, 4])
node21 = helper.make_tensor_value_info('node21', 1, [4, 4, 1, 1])
op12 = helper.make_node('Conv', inputs=['node19', 'node20'], outputs=['node21'], name='op12', kernel_shape=[3, 4], strides=[3, 2], pads=[0, 0, 0, 0])
node_list.append(op12)
node22 = helper.make_tensor_value_info('node22', 1, [4, 1, 4, 5])
op13 = helper.make_node('Tanh', inputs=['node19'], outputs=['node22'], name='op13')
node_list.append(op13)
node23 = helper.make_tensor_value_info('node23', 1, [1, 1, 1, 1])
op14 = helper.make_node('ReduceMean', inputs=['node21'], outputs=['node23'], name='op14', axes=[2, 0, 1, 3])
node_list.append(op14)
node24 = helper.make_tensor_value_info('node24', 1, [3, 5, 2, 3, 4])
node25 = helper.make_tensor_value_info('node25', 1, [3, 5, 2, 3, 4])
op15 = helper.make_node('Tanh', inputs=['node24'], outputs=['node25'], name='op15')
node_list.append(op15)
node26 = helper.make_tensor_value_info('node26', 7, [10])
init_tensor.append(helper.make_tensor('node26', 7, dims=(10,), vals=[0, 1, 1, 0, 0, 2, 2, 1, 1, 0]))
node27 = helper.make_tensor_value_info('node27', 1, [5, 8, 4, 4, 4])
op16 = helper.make_node('Pad', inputs=['node25', 'node26'], outputs=['node27'], name='op16', mode='constant')
node_list.append(op16)
node28 = helper.make_tensor_value_info('node28', 1, [5, 8, 4, 4, 4])
op17 = helper.make_node('Sum', inputs=['node27', 'node27', 'node27', 'node27', 'node27', 'node27', 'node27', 'node27', 'node27', 'node27'], outputs=['node28'], name='op17')
node_list.append(op17)
node29 = helper.make_tensor_value_info('node29', 1, [1, 1, 1, 1, 1])
op18 = helper.make_node('ReduceL2', inputs=['node27'], outputs=['node29'], name='op18', axes=[2, 0, 4, 1, 3])
node_list.append(op18)
node30 = helper.make_tensor_value_info('node30', 1, [4, 5, 4, 4, 8])
op19 = helper.make_node('Transpose', inputs=['node28'], outputs=['node30'], name='op19', perm=[4, 0, 3, 2, 1])
node_list.append(op19)
node31 = helper.make_tensor_value_info('node31', 1, [4, 5, 4, 4, 8])
op20 = helper.make_node('Sub', inputs=['node30', 'node30'], outputs=['node31'], name='op20')
node_list.append(op20)
node32 = helper.make_tensor_value_info('node32', 1, [4, 5, 4, 4, 8])
op21 = helper.make_node('Reciprocal', inputs=['node31'], outputs=['node32'], name='op21')
node_list.append(op21)
node33 = helper.make_tensor_value_info('node33', 1, [4, 5, 4, 4, 8])
node34 = helper.make_tensor_value_info('node34', 1, [4, 5, 4, 4, 8])
op22 = helper.make_node('Sub', inputs=['node31', 'node33'], outputs=['node34'], name='op22')
node_list.append(op22)
node35 = helper.make_tensor_value_info('node35', 1, [4, 5, 1, 1, 1])
op23 = helper.make_node('GlobalAveragePool', inputs=['node32'], outputs=['node35'], name='op23')
node_list.append(op23)
node36 = helper.make_tensor_value_info('node36', 1, [4, 5, 4, 4, 8])
op24 = helper.make_node('HardSigmoid', inputs=['node34'], outputs=['node36'], name='op24')
node_list.append(op24)
node37 = helper.make_tensor_value_info('node37', 1, [4, 5, 4, 4, 8])
op25 = helper.make_node('Sin', inputs=['node36'], outputs=['node37'], name='op25')
node_list.append(op25)
node38 = helper.make_tensor_value_info('node38', 1, [3, 5, 4, 4, 8])
node39 = helper.make_tensor_value_info('node39', 1, [2, 5, 4, 4, 8])
node40 = helper.make_tensor_value_info('node40', 1, [3, 5, 4, 4, 8])
node41 = helper.make_tensor_value_info('node41', 1, [2, 5, 4, 4, 8])
node42 = helper.make_tensor_value_info('node42', 1, [3, 5, 4, 4, 8])
node43 = helper.make_tensor_value_info('node43', 1, [1, 5, 4, 4, 8])
node44 = helper.make_tensor_value_info('node44', 1, [3, 5, 4, 4, 8])
node45 = helper.make_tensor_value_info('node45', 1, [25, 5, 4, 4, 8])
op26 = helper.make_node('Concat', inputs=['node37', 'node38', 'node39', 'node40', 'node41', 'node42', 'node43', 'node44', 'node36'], outputs=['node45'], name='op26', axis=0)
node_list.append(op26)
node46 = helper.make_tensor_value_info('node46', 1, [4, 5, 1, 1, 1])
op27 = helper.make_node('GlobalMaxPool', inputs=['node37'], outputs=['node46'], name='op27')
node_list.append(op27)
node47 = helper.make_tensor_value_info('node47', 1, [4, 5, 1, 1, 1])
op28 = helper.make_node('ReduceProd', inputs=['node46'], outputs=['node47'], name='op28', axes=[2])
node_list.append(op28)
node48 = helper.make_tensor_value_info('node48', 7, [4])
init_tensor.append(helper.make_tensor('node48', 7, dims=(4,), vals=[1, 1, 1, 20]))
node49 = helper.make_tensor_value_info('node49', 1, [1, 1, 1, 20])
op29 = helper.make_node('Reshape', inputs=['node47', 'node48'], outputs=['node49'], name='op29')
node_list.append(op29)
node50 = helper.make_tensor_value_info('node50', 1, [1, 1, 20, 1])
node51 = helper.make_tensor_value_info('node51', 1, [1, 1, 1, 1])
op30 = helper.make_node('MatMul', inputs=['node49', 'node50'], outputs=['node51'], name='op30')
node_list.append(op30)
node52 = helper.make_tensor_value_info('node52', 1, [1, 1, 1, 1])
op31 = helper.make_node('GlobalMaxPool', inputs=['node51'], outputs=['node52'], name='op31')
node_list.append(op31)
node53 = helper.make_tensor_value_info('node53', 1, [1, 1, 1, 1])
node54 = helper.make_tensor_value_info('node54', 1, [1, 1, 1, 1])
op32 = helper.make_node('Conv', inputs=['node51', 'node53'], outputs=['node54'], name='op32', kernel_shape=[1, 1], strides=[1, 1], pads=[0, 0, 0, 0], group=1)
node_list.append(op32)
node55 = helper.make_tensor_value_info('node55', 7, [3])
init_tensor.append(helper.make_tensor('node55', 7, dims=(3,), vals=[0, 0, 0]))
node56 = helper.make_tensor_value_info('node56', 1, [3, 1, 1, 1])
op33 = helper.make_node('Gather', inputs=['node54', 'node55'], outputs=['node56'], name='op33', axis=0)
node_list.append(op33)
node57 = helper.make_tensor_value_info('node57', 1, [3, 1, 1, 1])
op34 = helper.make_node('ReduceMean', inputs=['node56'], outputs=['node57'], name='op34', axes=[1, 3, 2])
node_list.append(op34)
node58 = helper.make_tensor_value_info('node58', 1, [3, 1, 1, 1])
op35 = helper.make_node('Max', inputs=['node56', 'node57', 'node56', 'node56', 'node56'], outputs=['node58'], name='op35')
node_list.append(op35)
node59 = helper.make_tensor_value_info('node59', 1, [5, 4])
node60 = helper.make_tensor_value_info('node60', 1, [3, 4])
op36 = helper.make_node('Gemm', inputs=['node1', 'node59'], outputs=['node60'], name='op36')
node_list.append(op36)
node61 = helper.make_tensor_value_info('node61', 1, [3, 1, 1, 1])
op37 = helper.make_node('Sigmoid', inputs=['node58'], outputs=['node61'], name='op37')
node_list.append(op37)
node62 = helper.make_tensor_value_info('node62', 1, [3, 1, 1, 1])
op38 = helper.make_node('Neg', inputs=['node61'], outputs=['node62'], name='op38')
node_list.append(op38)
node63 = helper.make_tensor_value_info('node63', 1, [1])
node64 = helper.make_tensor_value_info('node64', 1, [1])
node65 = helper.make_tensor_value_info('node65', 1, [1])
node66 = helper.make_tensor_value_info('node66', 1, [1])
node67 = helper.make_tensor_value_info('node67', 1, [3, 1, 1, 1])
op39 = helper.make_node('BatchNormalization', inputs=['node61', 'node63', 'node64', 'node65', 'node66'], outputs=['node67'], name='op39')
node_list.append(op39)
node68 = helper.make_tensor_value_info('node68', 7, [1])
init_tensor.append(helper.make_tensor('node68', 7, dims=(1,), vals=[4]))
node69 = helper.make_tensor_value_info('node69', 1, [3, 1, 1, 1, 1])
op40 = helper.make_node('Unsqueeze', inputs=['node62', 'node68'], outputs=['node69'], name='op40')
node_list.append(op40)
node70 = helper.make_tensor_value_info('node70', 1, [1, 1, 4, 4, 1])
op41 = helper.make_node('ReduceProd', inputs=['node32'], outputs=['node70'], name='op41', axes=[4, 1, 0])
node_list.append(op41)
node71 = helper.make_tensor_value_info('node71', 1, [3])
node72 = helper.make_tensor_value_info('node72', 1, [1])
op42 = helper.make_node('ReduceLogSumExp', inputs=['node71'], outputs=['node72'], name='op42', axes=[0])
node_list.append(op42)
node73 = helper.make_tensor_value_info('node73', 1, [4, 4])
op43 = helper.make_node('Flatten', inputs=['node70'], outputs=['node73'], name='op43', axis=3)
node_list.append(op43)
node74 = helper.make_tensor_value_info('node74', 1, [4, 4])
op44 = helper.make_node('Softsign', inputs=['node73'], outputs=['node74'], name='op44')
node_list.append(op44)
node75 = helper.make_tensor_value_info('node75', 1, [4, 1])
op45 = helper.make_node('ReduceL2', inputs=['node73'], outputs=['node75'], name='op45', axes=[1])
node_list.append(op45)
node76 = helper.make_tensor_value_info('node76', 1, [4, 1])
op46 = helper.make_node('Mean', inputs=['node75', 'node75'], outputs=['node76'], name='op46')
node_list.append(op46)
node77 = helper.make_tensor_value_info('node77', 1, [4, 1])
op47 = helper.make_node('Mul', inputs=['node76', 'node75'], outputs=['node77'], name='op47')
node_list.append(op47)
node78 = helper.make_tensor_value_info('node78', 1, [4, 1])
op48 = helper.make_node('Tanh', inputs=['node76'], outputs=['node78'], name='op48')
node_list.append(op48)
node79 = helper.make_tensor_value_info('node79', 1, [1, 1])
op49 = helper.make_node('ReduceProd', inputs=['node78'], outputs=['node79'], name='op49', axes=[0])
node_list.append(op49)
node80 = helper.make_tensor_value_info('node80', 1, [1, 1])
op50 = helper.make_node('ReduceLogSumExp', inputs=['node78'], outputs=['node80'], name='op50', axes=[1, 0])
node_list.append(op50)
node81 = helper.make_tensor_value_info('node81', 1, [1, 1])
op51 = helper.make_node('Relu', inputs=['node79'], outputs=['node81'], name='op51')
node_list.append(op51)
node82 = helper.make_tensor_value_info('node82', 1, [1, 1])
op52 = helper.make_node('ReduceMin', inputs=['node80'], outputs=['node82'], name='op52', axes=[1, 0])
node_list.append(op52)
node83 = helper.make_tensor_value_info('node83', 1, [1, 1])
op53 = helper.make_node('Selu', inputs=['node81'], outputs=['node83'], name='op53')
node_list.append(op53)
node84 = helper.make_tensor_value_info('node84', 1, [4])
init_tensor.append(helper.make_tensor('node84', 1, dims=(4,), vals=[1.0, 1.0, 1.0, 1.0]))
node85 = helper.make_tensor_value_info('node85', 1, [8])
init_tensor.append(helper.make_tensor('node85', 1, dims=(1, 8), vals=[0, 0, 0, 0, 1, 1, 1, 1]))
node86 = helper.make_tensor_value_info('node86', 1, [3, 1, 1, 1])
op54 = helper.make_node('Resize', inputs=['node62', 'node85', 'node84'], outputs=['node86'], name='op54', mode='nearest')
node_list.append(op54)
node87 = helper.make_tensor_value_info('node87', 1, [1, 1])
op55 = helper.make_node('Transpose', inputs=['node83'], outputs=['node87'], name='op55', perm=[0, 1])
node_list.append(op55)
node88 = helper.make_tensor_value_info('node88', 1, [3, 1, 1, 1])
op56 = helper.make_node('Add', inputs=['node86', 'node86'], outputs=['node88'], name='op56')
node_list.append(op56)
node89 = helper.make_tensor_value_info('node89', 1, [1, 1])
op57 = helper.make_node('ReduceMax', inputs=['node87'], outputs=['node89'], name='op57', axes=[0, 1])
node_list.append(op57)
node90 = helper.make_tensor_value_info('node90', 7, [2])
init_tensor.append(helper.make_tensor('node90', 7, dims=(2,), vals=[1, 1]))
node91 = helper.make_tensor_value_info('node91', 1, [1, 1])
op58 = helper.make_node('Expand', inputs=['node89', 'node90'], outputs=['node91'], name='op58')
node_list.append(op58)
node92 = helper.make_tensor_value_info('node92', 1, [1, 1])
op59 = helper.make_node('ReduceMin', inputs=['node91'], outputs=['node92'], name='op59', axes=[0])
node_list.append(op59)
node93 = helper.make_tensor_value_info('node93', 7, [8])
init_tensor.append(helper.make_tensor('node93', 7, dims=(8,), vals=[1, 1, 2, 2, 1, 0, 2, 1]))
node94 = helper.make_tensor_value_info('node94', 1, [6, 5, 8, 8])
op60 = helper.make_node('Pad', inputs=['node11', 'node93'], outputs=['node94'], name='op60', mode='constant')
node_list.append(op60)
output_tensor.append(node72)
output_tensor.append(node52)
output_tensor.append(node22)
output_tensor.append(node35)
output_tensor.append(node77)
output_tensor.append(node45)
output_tensor.append(node29)
output_tensor.append(node82)
output_tensor.append(node13)
output_tensor.append(node69)
output_tensor.append(node23)
output_tensor.append(node67)
output_tensor.append(node74)
output_tensor.append(node88)
output_tensor.append(node92)
output_tensor.append(node18)
output_tensor.append(node60)
output_tensor.append(node94)
input_tensor.append(node1)
input_tensor.append(node2)
input_tensor.append(node3)
input_tensor.append(node6)
input_tensor.append(node7)
input_tensor.append(node8)
input_tensor.append(node9)
input_tensor.append(node20)
input_tensor.append(node24)
input_tensor.append(node33)
input_tensor.append(node38)
input_tensor.append(node39)
input_tensor.append(node40)
input_tensor.append(node41)
input_tensor.append(node42)
input_tensor.append(node43)
input_tensor.append(node44)
input_tensor.append(node50)
input_tensor.append(node53)
input_tensor.append(node59)
input_tensor.append(node63)
input_tensor.append(node64)
input_tensor.append(node65)
input_tensor.append(node66)
input_tensor.append(node71)
graph_def = helper.make_graph(node_list, 'test-model', input_tensor, output_tensor, init_tensor)
model = helper.make_model(graph_def, producer_name='onnx-example')
