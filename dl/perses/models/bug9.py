from onnx import helper
input_tensor = []
output_tensor = []
init_tensor = []
node_list = []

node1 = helper.make_tensor_value_info('node1', 1, [3])
node2 = helper.make_tensor_value_info('node2', 1, [3])
op0 = helper.make_node('Softmax', inputs=['node1'], outputs=['node2'], name='op0', axis=0)
node_list.append(op0)
node3 = helper.make_tensor_value_info('node3', 1, [4, 3, 5])
node4 = helper.make_tensor_value_info('node4', 1, [4, 3, 5])
op1 = helper.make_node('BatchNormalization', inputs=['node3', 'node2', 'node2', 'node1', 'node1'], outputs=['node4'], name='op1')
node_list.append(op1)
node5 = helper.make_tensor_value_info('node5', 1, [3])
op2 = helper.make_node('Sin', inputs=['node2'], outputs=['node5'], name='op2')
node_list.append(op2)
node6 = helper.make_tensor_value_info('node6', 7, [3])
init_tensor.append(helper.make_tensor('node6', 7, dims=(3,), vals=[3, 1, 2]))
node7 = helper.make_tensor_value_info('node7', 7, [3])
init_tensor.append(helper.make_tensor('node7', 7, dims=(3,), vals=[4, 3, 3]))
node8 = helper.make_tensor_value_info('node8', 7, [3])
init_tensor.append(helper.make_tensor('node8', 7, dims=(3,), vals=[0, 1, 2]))
node9 = helper.make_tensor_value_info('node9', 7, [3])
init_tensor.append(helper.make_tensor('node9', 7, dims=(3,), vals=[2, 2, 1]))
node10 = helper.make_tensor_value_info('node10', 1, [1, 1, 1])
op3 = helper.make_node('Slice', inputs=['node4', 'node6', 'node7', 'node8', 'node9'], outputs=['node10'], name='op3')
node_list.append(op3)
node11 = helper.make_tensor_value_info('node11', 1, [1, 1, 1])
op4 = helper.make_node('Mul', inputs=['node10', 'node10'], outputs=['node11'], name='op4')
node_list.append(op4)
node12 = helper.make_tensor_value_info('node12', 7, [2])
init_tensor.append(helper.make_tensor('node12', 7, dims=(2,), vals=[1, 1]))
node13 = helper.make_tensor_value_info('node13', 1, [1, 1])
op5 = helper.make_node('Reshape', inputs=['node11', 'node12'], outputs=['node13'], name='op5')
node_list.append(op5)
node14 = helper.make_tensor_value_info('node14', 1, [1, 1])
node15 = helper.make_tensor_value_info('node15', 1, [1, 1])
op6 = helper.make_node('Sum', inputs=['node13', 'node13', 'node14', 'node13', 'node13', 'node13'], outputs=['node15'], name='op6')
node_list.append(op6)
node16 = helper.make_tensor_value_info('node16', 1, [1, 1])
op7 = helper.make_node('ReduceMean', inputs=['node13'], outputs=['node16'], name='op7', axes=[1])
node_list.append(op7)
node17 = helper.make_tensor_value_info('node17', 1, [1, 1])
op8 = helper.make_node('Sub', inputs=['node16', 'node16'], outputs=['node17'], name='op8')
node_list.append(op8)
node18 = helper.make_tensor_value_info('node18', 1, [1, 1])
op9 = helper.make_node('Selu', inputs=['node13'], outputs=['node18'], name='op9')
node_list.append(op9)
node19 = helper.make_tensor_value_info('node19', 1, [1, 1, 1])
op10 = helper.make_node('GlobalAveragePool', inputs=['node10'], outputs=['node19'], name='op10')
node_list.append(op10)
node20 = helper.make_tensor_value_info('node20', 1, [1, 1, 1])
op11 = helper.make_node('LpPool', inputs=['node19'], outputs=['node20'], name='op11', kernel_shape=[1], strides=[1], p=1)
node_list.append(op11)
node21 = helper.make_tensor_value_info('node21', 1, [1, 1, 1])
op12 = helper.make_node('Mul', inputs=['node20', 'node20'], outputs=['node21'], name='op12')
node_list.append(op12)
node22 = helper.make_tensor_value_info('node22', 7, [1])
init_tensor.append(helper.make_tensor('node22', 7, dims=(1,), vals=[0]))
node23 = helper.make_tensor_value_info('node23', 1, [1, 1, 1])
op13 = helper.make_node('Gather', inputs=['node21', 'node22'], outputs=['node23'], name='op13', axis=0)
node_list.append(op13)
node24 = helper.make_tensor_value_info('node24', 1, [1, 1, 1])
op14 = helper.make_node('Cos', inputs=['node21'], outputs=['node24'], name='op14')
node_list.append(op14)
node25 = helper.make_tensor_value_info('node25', 1, [1, 1, 1])
op15 = helper.make_node('GlobalMaxPool', inputs=['node23'], outputs=['node25'], name='op15')
node_list.append(op15)
node26 = helper.make_tensor_value_info('node26', 1, [3, 4])
node27 = helper.make_tensor_value_info('node27', 1, [3, 4])
op16 = helper.make_node('Round', inputs=['node26'], outputs=['node27'], name='op16')
node_list.append(op16)
node28 = helper.make_tensor_value_info('node28', 1, [3, 4])
op17 = helper.make_node('Cos', inputs=['node27'], outputs=['node28'], name='op17')
node_list.append(op17)
node29 = helper.make_tensor_value_info('node29', 1, [1])
node30 = helper.make_tensor_value_info('node30', 1, [1])
node31 = helper.make_tensor_value_info('node31', 1, [1])
node32 = helper.make_tensor_value_info('node32', 1, [1])
node33 = helper.make_tensor_value_info('node33', 1, [1, 1, 1])
op18 = helper.make_node('BatchNormalization', inputs=['node24', 'node29', 'node30', 'node31', 'node32'], outputs=['node33'], name='op18')
node_list.append(op18)
node34 = helper.make_tensor_value_info('node34', 1, [3])
init_tensor.append(helper.make_tensor('node34', 1, dims=(3,), vals=[1.0, 1.0, 1.0]))
node35 = helper.make_tensor_value_info('node35', 1, [6])
init_tensor.append(helper.make_tensor('node35', 1, dims=(1, 6), vals=[0, 0, 0, 1, 1, 1]))
node36 = helper.make_tensor_value_info('node36', 1, [1, 1, 1])
op19 = helper.make_node('Resize', inputs=['node33', 'node35', 'node34'], outputs=['node36'], name='op19', mode='nearest')
node_list.append(op19)
node37 = helper.make_tensor_value_info('node37', 1, [1, 1, 1])
op20 = helper.make_node('Mean', inputs=['node33', 'node36', 'node36', 'node36', 'node36'], outputs=['node37'], name='op20')
node_list.append(op20)
node38 = helper.make_tensor_value_info('node38', 1, [1, 1, 1])
op21 = helper.make_node('Floor', inputs=['node36'], outputs=['node38'], name='op21')
node_list.append(op21)
node39 = helper.make_tensor_value_info('node39', 1, [1, 1, 1])
op22 = helper.make_node('Max', inputs=['node37', 'node37', 'node38', 'node37', 'node37', 'node37', 'node37', 'node38', 'node37'], outputs=['node39'], name='op22')
node_list.append(op22)
node40 = helper.make_tensor_value_info('node40', 1, [1, 1, 1])
op23 = helper.make_node('ReduceMin', inputs=['node39'], outputs=['node40'], name='op23', axes=[1, 0, 2])
node_list.append(op23)
node41 = helper.make_tensor_value_info('node41', 1, [1, 1, 1])
op24 = helper.make_node('Add', inputs=['node39', 'node39'], outputs=['node41'], name='op24')
node_list.append(op24)
node42 = helper.make_tensor_value_info('node42', 1, [1, 1, 1])
op25 = helper.make_node('Abs', inputs=['node41'], outputs=['node42'], name='op25')
node_list.append(op25)
node43 = helper.make_tensor_value_info('node43', 1, [1, 1, 1])
op26 = helper.make_node('ConvTranspose', inputs=['node41', 'node42'], outputs=['node43'], name='op26', kernel_shape=[1], strides=[1], pads=[0, 0], group=1)
node_list.append(op26)
node44 = helper.make_tensor_value_info('node44', 1, [1, 1, 1])
op27 = helper.make_node('Ceil', inputs=['node43'], outputs=['node44'], name='op27')
node_list.append(op27)
node45 = helper.make_tensor_value_info('node45', 1, [1, 1, 1])
op28 = helper.make_node('Identity', inputs=['node44'], outputs=['node45'], name='op28')
node_list.append(op28)
node46 = helper.make_tensor_value_info('node46', 1, [1, 1, 1])
op29 = helper.make_node('Conv', inputs=['node44', 'node45'], outputs=['node46'], name='op29', kernel_shape=[1], strides=[1], pads=[0, 0])
node_list.append(op29)
node47 = helper.make_tensor_value_info('node47', 1, [1, 1, 1])
op30 = helper.make_node('AveragePool', inputs=['node46'], outputs=['node47'], name='op30', kernel_shape=[1], strides=[1])
node_list.append(op30)
node48 = helper.make_tensor_value_info('node48', 1, [1, 1, 1])
op31 = helper.make_node('ReduceMean', inputs=['node47'], outputs=['node48'], name='op31', axes=[1, 0])
node_list.append(op31)
node49 = helper.make_tensor_value_info('node49', 1, [1, 1, 1])
op32 = helper.make_node('MatMul', inputs=['node48', 'node47'], outputs=['node49'], name='op32')
node_list.append(op32)
node50 = helper.make_tensor_value_info('node50', 1, [1, 1, 1])
op33 = helper.make_node('AveragePool', inputs=['node48'], outputs=['node50'], name='op33', kernel_shape=[1], strides=[1])
node_list.append(op33)
node51 = helper.make_tensor_value_info('node51', 1, [1, 1, 1])
op34 = helper.make_node('Transpose', inputs=['node49'], outputs=['node51'], name='op34', perm=[1, 0, 2])
node_list.append(op34)
node52 = helper.make_tensor_value_info('node52', 1, [1, 1, 1])
op35 = helper.make_node('Softmax', inputs=['node50'], outputs=['node52'], name='op35', axis=1)
node_list.append(op35)
node53 = helper.make_tensor_value_info('node53', 1, [1, 1, 1])
op36 = helper.make_node('Dropout', inputs=['node51'], outputs=['node53'], name='op36')
node_list.append(op36)
node54 = helper.make_tensor_value_info('node54', 7, [2])
init_tensor.append(helper.make_tensor('node54', 7, dims=(2,), vals=[1, 2]))
node55 = helper.make_tensor_value_info('node55', 1, [1, 1, 1, 1, 1])
op37 = helper.make_node('Unsqueeze', inputs=['node53', 'node54'], outputs=['node55'], name='op37')
node_list.append(op37)
node56 = helper.make_tensor_value_info('node56', 1, [1, 1, 1])
node57 = helper.make_tensor_value_info('node57', 7, [1])
init_tensor.append(helper.make_tensor('node57', 7, dims=(1,), vals=[1]))
op38 = helper.make_node('Split', inputs=['node53', 'node57'], outputs=['node56'], name='op38')
node_list.append(op38)
node58 = helper.make_tensor_value_info('node58', 1, [1, 1, 1])
op39 = helper.make_node('MatMul', inputs=['node56', 'node56'], outputs=['node58'], name='op39')
node_list.append(op39)
node59 = helper.make_tensor_value_info('node59', 1, [3])
op40 = helper.make_node('Elu', inputs=['node5'], outputs=['node59'], name='op40', alpha=2.0)
node_list.append(op40)
node60 = helper.make_tensor_value_info('node60', 1, [5])
node61 = helper.make_tensor_value_info('node61', 7, [1])
init_tensor.append(helper.make_tensor('node61', 7, dims=(1,), vals=[1]))
node62 = helper.make_tensor_value_info('node62', 7, [1])
init_tensor.append(helper.make_tensor('node62', 7, dims=(1,), vals=[3]))
node63 = helper.make_tensor_value_info('node63', 7, [1])
init_tensor.append(helper.make_tensor('node63', 7, dims=(1,), vals=[0]))
node64 = helper.make_tensor_value_info('node64', 7, [1])
init_tensor.append(helper.make_tensor('node64', 7, dims=(1,), vals=[1]))
node65 = helper.make_tensor_value_info('node65', 1, [2])
op41 = helper.make_node('Slice', inputs=['node60', 'node61', 'node62', 'node63', 'node64'], outputs=['node65'], name='op41')
node_list.append(op41)
node66 = helper.make_tensor_value_info('node66', 1, [2, 1])
node67 = helper.make_tensor_value_info('node67', 1, [2, 1])
node68 = helper.make_tensor_value_info('node68', 1, [2, 1])
op42 = helper.make_node('Sub', inputs=['node66', 'node67'], outputs=['node68'], name='op42')
node_list.append(op42)
node69 = helper.make_tensor_value_info('node69', 7, [1, 1])
init_tensor.append(helper.make_tensor('node69', 7, dims=(1, 1), vals=[0]))
node70 = helper.make_tensor_value_info('node70', 1, [1, 1])
op43 = helper.make_node('Gather', inputs=['node65', 'node69'], outputs=['node70'], name='op43')
node_list.append(op43)
node71 = helper.make_tensor_value_info('node71', 1, [1, 1])
op44 = helper.make_node('ReduceL2', inputs=['node68'], outputs=['node71'], name='op44', axes=[0, 1])
node_list.append(op44)
node72 = helper.make_tensor_value_info('node72', 7, [1])
init_tensor.append(helper.make_tensor('node72', 7, dims=(1,), vals=[1]))
node73 = helper.make_tensor_value_info('node73', 1, [1, 1, 1])
op45 = helper.make_node('Unsqueeze', inputs=['node70', 'node72'], outputs=['node73'], name='op45')
node_list.append(op45)
node74 = helper.make_tensor_value_info('node74', 1, [2, 5, 2, 5, 3])
node75 = helper.make_tensor_value_info('node75', 1, [2, 5, 2, 5, 3])
op46 = helper.make_node('Cos', inputs=['node74'], outputs=['node75'], name='op46')
node_list.append(op46)
node76 = helper.make_tensor_value_info('node76', 1, [2, 5, 2, 5, 3])
op47 = helper.make_node('Dropout', inputs=['node75'], outputs=['node76'], name='op47')
node_list.append(op47)
node77 = helper.make_tensor_value_info('node77', 7, [5])
init_tensor.append(helper.make_tensor('node77', 7, dims=(5,), vals=[1, 1, 1, 1, 1]))
node78 = helper.make_tensor_value_info('node78', 1, [2, 5, 2, 5, 3])
op48 = helper.make_node('Expand', inputs=['node76', 'node77'], outputs=['node78'], name='op48')
node_list.append(op48)
node79 = helper.make_tensor_value_info('node79', 1, [2, 5, 1, 1, 3])
op49 = helper.make_node('AveragePool', inputs=['node78'], outputs=['node79'], name='op49', kernel_shape=[1, 5, 1], strides=[2, 3, 1])
node_list.append(op49)
node80 = helper.make_tensor_value_info('node80', 1, [2, 5, 1, 1, 3])
op50 = helper.make_node('Reciprocal', inputs=['node79'], outputs=['node80'], name='op50')
node_list.append(op50)
node81 = helper.make_tensor_value_info('node81', 1, [2, 5, 1, 1, 3])
op51 = helper.make_node('Cos', inputs=['node80'], outputs=['node81'], name='op51')
node_list.append(op51)
node82 = helper.make_tensor_value_info('node82', 1, [2, 5, 1, 1, 3])
op52 = helper.make_node('Tanh', inputs=['node81'], outputs=['node82'], name='op52')
node_list.append(op52)
node83 = helper.make_tensor_value_info('node83', 1, [5, 1, 1, 1, 3])
node84 = helper.make_tensor_value_info('node84', 1, [2, 1, 1, 1, 9])
op53 = helper.make_node('ConvTranspose', inputs=['node82', 'node83'], outputs=['node84'], name='op53', kernel_shape=[1, 1, 3], strides=[1, 1, 3], pads=[0, 0, 0, 0, 0, 0])
node_list.append(op53)
node85 = helper.make_tensor_value_info('node85', 1, [2, 1, 1, 1, 9])
node86 = helper.make_tensor_value_info('node86', 1, [2, 1, 1, 1, 9])
op54 = helper.make_node('Min', inputs=['node84', 'node84', 'node84', 'node84', 'node84', 'node84', 'node84', 'node85', 'node84', 'node84'], outputs=['node86'], name='op54')
node_list.append(op54)
node87 = helper.make_tensor_value_info('node87', 1, [2, 1, 1, 1, 9])
op55 = helper.make_node('Abs', inputs=['node86'], outputs=['node87'], name='op55')
node_list.append(op55)
node88 = helper.make_tensor_value_info('node88', 7, [10])
init_tensor.append(helper.make_tensor('node88', 7, dims=(10,), vals=[0, 0, 0, 0, 2, 0, 0, 2, 2, 2]))
node89 = helper.make_tensor_value_info('node89', 1, [2, 1, 3, 3, 13])
op56 = helper.make_node('Pad', inputs=['node87', 'node88'], outputs=['node89'], name='op56', mode='constant')
node_list.append(op56)
node90 = helper.make_tensor_value_info('node90', 1, [2, 1, 3, 3, 13])
node91 = helper.make_tensor_value_info('node91', 1, [2, 1, 3, 3, 13])
op57 = helper.make_node('Min', inputs=['node89', 'node89', 'node89', 'node89', 'node89', 'node89', 'node90'], outputs=['node91'], name='op57')
node_list.append(op57)
node92 = helper.make_tensor_value_info('node92', 1, [5])
init_tensor.append(helper.make_tensor('node92', 1, dims=(5,), vals=[1.0, 1.0, 1.0, 1.0, 1.0]))
node93 = helper.make_tensor_value_info('node93', 1, [10])
init_tensor.append(helper.make_tensor('node93', 1, dims=(1, 10), vals=[0, 0, 0, 0, 0, 1, 1, 1, 1, 1]))
node94 = helper.make_tensor_value_info('node94', 1, [2, 1, 3, 3, 13])
op58 = helper.make_node('Resize', inputs=['node89', 'node93', 'node92'], outputs=['node94'], name='op58', mode='nearest')
node_list.append(op58)
node95 = helper.make_tensor_value_info('node95', 7, [5])
init_tensor.append(helper.make_tensor('node95', 7, dims=(5,), vals=[1, 0, 4, 3, 2]))
node96 = helper.make_tensor_value_info('node96', 1, [1, 1, 1, 1, 1])
op59 = helper.make_node('ReduceSum', inputs=['node91', 'node95'], outputs=['node96'], name='op59')
node_list.append(op59)
node97 = helper.make_tensor_value_info('node97', 1, [1, 1, 1, 1, 1])
op60 = helper.make_node('ThresholdedRelu', inputs=['node96'], outputs=['node97'], name='op60', alpha=1.0)
node_list.append(op60)
node98 = helper.make_tensor_value_info('node98', 1, [1, 1, 1, 1, 1])
node99 = helper.make_tensor_value_info('node99', 1, [1, 1, 1, 1, 1])
op61 = helper.make_node('Mean', inputs=['node96', 'node98', 'node96', 'node97', 'node97', 'node97', 'node96', 'node97', 'node97'], outputs=['node99'], name='op61')
node_list.append(op61)
output_tensor.append(node73)
output_tensor.append(node71)
output_tensor.append(node15)
output_tensor.append(node59)
output_tensor.append(node52)
output_tensor.append(node28)
output_tensor.append(node55)
output_tensor.append(node94)
output_tensor.append(node99)
output_tensor.append(node58)
output_tensor.append(node25)
output_tensor.append(node40)
output_tensor.append(node17)
output_tensor.append(node18)
input_tensor.append(node1)
input_tensor.append(node3)
input_tensor.append(node14)
input_tensor.append(node26)
input_tensor.append(node29)
input_tensor.append(node30)
input_tensor.append(node31)
input_tensor.append(node32)
input_tensor.append(node60)
input_tensor.append(node66)
input_tensor.append(node67)
input_tensor.append(node74)
input_tensor.append(node83)
input_tensor.append(node85)
input_tensor.append(node90)
input_tensor.append(node98)
graph_def = helper.make_graph(node_list, 'test-model', input_tensor, output_tensor, init_tensor)
model = helper.make_model(graph_def, producer_name='onnx-example')
