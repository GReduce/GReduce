from onnx import helper
input_tensor = []
output_tensor = []
init_tensor = []
node_list = []

node1 = helper.make_tensor_value_info('node1', 1, [2, 4, 4, 2])
node2 = helper.make_tensor_value_info('node2', 1, [8, 8])
op0 = helper.make_node('Flatten', inputs=['node1'], outputs=['node2'], name='op0', axis=2)
node_list.append(op0)
node3 = helper.make_tensor_value_info('node3', 1, [5, 8])
node4 = helper.make_tensor_value_info('node4', 1, [2, 8])
node5 = helper.make_tensor_value_info('node5', 1, [4, 8])
node6 = helper.make_tensor_value_info('node6', 1, [1, 8])
node7 = helper.make_tensor_value_info('node7', 1, [3, 8])
node8 = helper.make_tensor_value_info('node8', 1, [23, 8])
op1 = helper.make_node('Concat', inputs=['node2', 'node3', 'node4', 'node5', 'node6', 'node7'], outputs=['node8'], name='op1', axis=0)
node_list.append(op1)
node9 = helper.make_tensor_value_info('node9', 1, [4, 2, 3, 1, 4])
node10 = helper.make_tensor_value_info('node10', 1, [4, 2, 3, 1, 4])
node11 = helper.make_tensor_value_info('node11', 1, [4, 2, 3, 1, 4])
op2 = helper.make_node('Sub', inputs=['node9', 'node10'], outputs=['node11'], name='op2')
node_list.append(op2)
node12 = helper.make_tensor_value_info('node12', 1, [23, 8])
op3 = helper.make_node('Cos', inputs=['node8'], outputs=['node12'], name='op3')
node_list.append(op3)
node13 = helper.make_tensor_value_info('node13', 1, [4, 2, 1, 1, 1])
op4 = helper.make_node('GlobalAveragePool', inputs=['node11'], outputs=['node13'], name='op4')
node_list.append(op4)
node14 = helper.make_tensor_value_info('node14', 1, [4, 2, 1, 1, 1])
op5 = helper.make_node('Softsign', inputs=['node13'], outputs=['node14'], name='op5')
node_list.append(op5)
node15 = helper.make_tensor_value_info('node15', 1, [4, 2, 1, 1, 1])
op6 = helper.make_node('Round', inputs=['node14'], outputs=['node15'], name='op6')
node_list.append(op6)
node16 = helper.make_tensor_value_info('node16', 1, [4, 2, 1, 1, 1])
op7 = helper.make_node('Exp', inputs=['node14'], outputs=['node16'], name='op7')
node_list.append(op7)
node17 = helper.make_tensor_value_info('node17', 1, [4, 2, 1, 1, 1])
op8 = helper.make_node('Dropout', inputs=['node16'], outputs=['node17'], name='op8')
node_list.append(op8)
node18 = helper.make_tensor_value_info('node18', 1, [1, 1, 1, 1, 1])
op9 = helper.make_node('ReduceL1', inputs=['node16'], outputs=['node18'], name='op9', axes=[0, 1, 2])
node_list.append(op9)
node19 = helper.make_tensor_value_info('node19', 1, [1, 1, 1, 1, 1])
op10 = helper.make_node('ReduceSumSquare', inputs=['node18'], outputs=['node19'], name='op10', axes=[2])
node_list.append(op10)
node20 = helper.make_tensor_value_info('node20', 7, [4])
init_tensor.append(helper.make_tensor('node20', 7, dims=(4,), vals=[1, 1, 1, 1]))
node21 = helper.make_tensor_value_info('node21', 1, [1, 1, 1, 1])
op11 = helper.make_node('Reshape', inputs=['node18', 'node20'], outputs=['node21'], name='op11')
node_list.append(op11)
node22 = helper.make_tensor_value_info('node22', 1, [1, 1, 1, 1])
op12 = helper.make_node('PRelu', inputs=['node21', 'node21'], outputs=['node22'], name='op12')
node_list.append(op12)
node23 = helper.make_tensor_value_info('node23', 1, [1, 1, 1, 1])
op13 = helper.make_node('ReduceLogSumExp', inputs=['node22'], outputs=['node23'], name='op13', axes=[1, 3, 2])
node_list.append(op13)
node24 = helper.make_tensor_value_info('node24', 7, [8])
init_tensor.append(helper.make_tensor('node24', 7, dims=(8,), vals=[2, 0, 2, 1, 2, 2, 2, 2]))
node25 = helper.make_tensor_value_info('node25', 1, [5, 3, 5, 4])
op14 = helper.make_node('Pad', inputs=['node22', 'node24'], outputs=['node25'], name='op14', mode='constant')
node_list.append(op14)
node26 = helper.make_tensor_value_info('node26', 1, [1, 1, 1, 1])
op15 = helper.make_node('ConvTranspose', inputs=['node23', 'node23'], outputs=['node26'], name='op15', kernel_shape=[1, 1], strides=[1, 1], pads=[0, 0, 0, 0], group=1)
node_list.append(op15)
node27 = helper.make_tensor_value_info('node27', 1, [1, 1, 1, 1])
op16 = helper.make_node('Neg', inputs=['node26'], outputs=['node27'], name='op16')
node_list.append(op16)
node28 = helper.make_tensor_value_info('node28', 1, [1, 1, 1, 1])
node29 = helper.make_tensor_value_info('node29', 1, [1, 1, 1, 1])
op17 = helper.make_node('Min', inputs=['node26', 'node26', 'node26', 'node26', 'node26', 'node26', 'node26', 'node28'], outputs=['node29'], name='op17')
node_list.append(op17)
node30 = helper.make_tensor_value_info('node30', 1, [1, 1, 1, 1])
op18 = helper.make_node('ThresholdedRelu', inputs=['node27'], outputs=['node30'], name='op18', alpha=0.5)
node_list.append(op18)
node31 = helper.make_tensor_value_info('node31', 1, [2, 1])
node32 = helper.make_tensor_value_info('node32', 1, [2, 1])
op19 = helper.make_node('ReduceLogSumExp', inputs=['node31'], outputs=['node32'], name='op19', axes=[1])
node_list.append(op19)
node33 = helper.make_tensor_value_info('node33', 1, [1, 1, 1, 1])
node34 = helper.make_tensor_value_info('node34', 7, [1])
init_tensor.append(helper.make_tensor('node34', 7, dims=(1,), vals=[1]))
op20 = helper.make_node('Split', inputs=['node30', 'node34'], outputs=['node33'], name='op20', axis=3)
node_list.append(op20)
node35 = helper.make_tensor_value_info('node35', 1, [1, 1, 1, 1])
op21 = helper.make_node('ReduceSumSquare', inputs=['node33'], outputs=['node35'], name='op21', axes=[2, 0])
node_list.append(op21)
node36 = helper.make_tensor_value_info('node36', 7, [3])
init_tensor.append(helper.make_tensor('node36', 7, dims=(3,), vals=[1, 1, 1]))
node37 = helper.make_tensor_value_info('node37', 1, [1, 1, 1])
op22 = helper.make_node('Reshape', inputs=['node35', 'node36'], outputs=['node37'], name='op22')
node_list.append(op22)
node38 = helper.make_tensor_value_info('node38', 1, [1, 1, 1, 1])
op23 = helper.make_node('ReduceL2', inputs=['node35'], outputs=['node38'], name='op23', axes=[2, 0])
node_list.append(op23)
node39 = helper.make_tensor_value_info('node39', 1, [1, 1, 1, 1])
op24 = helper.make_node('Softsign', inputs=['node38'], outputs=['node39'], name='op24')
node_list.append(op24)
node40 = helper.make_tensor_value_info('node40', 1, [1, 1, 1, 1])
op25 = helper.make_node('ReduceMin', inputs=['node39'], outputs=['node40'], name='op25', axes=[3, 1, 2])
node_list.append(op25)
node41 = helper.make_tensor_value_info('node41', 1, [1, 1, 1, 1])
op26 = helper.make_node('ReduceL2', inputs=['node39'], outputs=['node41'], name='op26', axes=[3])
node_list.append(op26)
node42 = helper.make_tensor_value_info('node42', 1, [1, 1, 1, 1])
op27 = helper.make_node('Exp', inputs=['node41'], outputs=['node42'], name='op27')
node_list.append(op27)
node43 = helper.make_tensor_value_info('node43', 1, [1, 1, 1, 1])
op28 = helper.make_node('Ceil', inputs=['node41'], outputs=['node43'], name='op28')
node_list.append(op28)
node44 = helper.make_tensor_value_info('node44', 1, [1, 1, 1, 1])
op29 = helper.make_node('ReduceMin', inputs=['node43'], outputs=['node44'], name='op29', axes=[0, 1, 2, 3])
node_list.append(op29)
node45 = helper.make_tensor_value_info('node45', 1, [1, 1, 1, 1])
op30 = helper.make_node('Reciprocal', inputs=['node43'], outputs=['node45'], name='op30')
node_list.append(op30)
node46 = helper.make_tensor_value_info('node46', 1, [1, 1, 1, 1])
op31 = helper.make_node('MaxPool', inputs=['node44'], outputs=['node46'], name='op31', kernel_shape=[1, 1], strides=[1, 1])
node_list.append(op31)
node47 = helper.make_tensor_value_info('node47', 1, [1, 1, 1, 1])
op32 = helper.make_node('Reciprocal', inputs=['node45'], outputs=['node47'], name='op32')
node_list.append(op32)
output_tensor.append(node37)
output_tensor.append(node17)
output_tensor.append(node47)
output_tensor.append(node32)
output_tensor.append(node40)
output_tensor.append(node15)
output_tensor.append(node25)
output_tensor.append(node42)
output_tensor.append(node29)
output_tensor.append(node12)
output_tensor.append(node46)
output_tensor.append(node19)
input_tensor.append(node1)
input_tensor.append(node3)
input_tensor.append(node4)
input_tensor.append(node5)
input_tensor.append(node6)
input_tensor.append(node7)
input_tensor.append(node9)
input_tensor.append(node10)
input_tensor.append(node28)
input_tensor.append(node31)
graph_def = helper.make_graph(node_list, 'test-model', input_tensor, output_tensor, init_tensor)
model = helper.make_model(graph_def, producer_name='onnx-example')
