from onnx import helper
input_tensor = []
output_tensor = []
init_tensor = []
node_list = []
node1 = helper.make_tensor_value_info('node1', 1, [4, 2, 5, 4, 4])
node2 = helper.make_tensor_value_info('node2', 1, [4, 4, 5, 4, 4])
node3 = helper.make_tensor_value_info('node3', 1, [4, 4, 5, 4, 4])
node4 = helper.make_tensor_value_info('node4', 1, [4, 1, 5, 4, 4])
node5 = helper.make_tensor_value_info('node5', 1, [4, 5, 5, 4, 4])
node6 = helper.make_tensor_value_info('node6', 1, [4, 5, 5, 4, 4])
node7 = helper.make_tensor_value_info('node7', 1, [4, 4, 5, 4, 4])
node8 = helper.make_tensor_value_info('node8', 1, [4, 5, 5, 4, 4])
node9 = helper.make_tensor_value_info('node9', 1, [4, 34, 5, 4, 4])
op0 = helper.make_node('Concat', inputs=['node1', 'node1', 'node2', 'node3', 'node4', 'node5', 'node1', 'node6', 'node7', 'node8'], outputs=['node9'], name='op0', axis=1)
node_list.append(op0)
node10 = helper.make_tensor_value_info('node10', 1, [4, 5, 4, 2, 4])
op1 = helper.make_node('Transpose', inputs=['node1'], outputs=['node10'], name='op1', perm=[0, 2, 3, 1, 4])
node_list.append(op1)
node11 = helper.make_tensor_value_info('node11', 1, [2, 4, 4, 5])
node12 = helper.make_tensor_value_info('node12', 1, [2, 4, 4, 5])
node13 = helper.make_tensor_value_info('node13', 1, [2, 4, 4, 5])
op2 = helper.make_node('PRelu', inputs=['node11', 'node12'], outputs=['node13'], name='op2')
node_list.append(op2)
node14 = helper.make_tensor_value_info('node14', 1, [4, 4])
node15 = helper.make_tensor_value_info('node15', 1, [4, 1])
op3 = helper.make_node('ReduceSumSquare', inputs=['node14'], outputs=['node15'], name='op3', axes=[1])
node_list.append(op3)
node16 = helper.make_tensor_value_info('node16', 1, [2, 4, 1, 1])
op4 = helper.make_node('GlobalAveragePool', inputs=['node13'], outputs=['node16'], name='op4')
node_list.append(op4)
node17 = helper.make_tensor_value_info('node17', 1, [2, 4, 1, 1])
node18 = helper.make_tensor_value_info('node18', 1, [2, 4, 1, 1])
op5 = helper.make_node('Mean', inputs=['node16', 'node16', 'node16', 'node16', 'node16', 'node17'], outputs=['node18'], name='op5')
node_list.append(op5)
node19 = helper.make_tensor_value_info('node19', 1, [2, 4, 1, 1])
op6 = helper.make_node('Abs', inputs=['node16'], outputs=['node19'], name='op6')
node_list.append(op6)
node20 = helper.make_tensor_value_info('node20', 1, [2, 4, 1, 1])
op7 = helper.make_node('Ceil', inputs=['node19'], outputs=['node20'], name='op7')
node_list.append(op7)
node21 = helper.make_tensor_value_info('node21', 7, [4])
init_tensor.append(helper.make_tensor('node21', 7, dims=(4,), vals=[1, 3, 0, 0]))
node22 = helper.make_tensor_value_info('node22', 7, [4])
init_tensor.append(helper.make_tensor('node22', 7, dims=(4,), vals=[2, 4, 1, 1]))
node23 = helper.make_tensor_value_info('node23', 7, [4])
init_tensor.append(helper.make_tensor('node23', 7, dims=(4,), vals=[0, 1, 2, 3]))
node24 = helper.make_tensor_value_info('node24', 7, [4])
init_tensor.append(helper.make_tensor('node24', 7, dims=(4,), vals=[1, 3, 3, 2]))
node25 = helper.make_tensor_value_info('node25', 1, [1, 1, 1, 1])
op8 = helper.make_node('Slice', inputs=['node19', 'node21', 'node22', 'node23', 'node24'], outputs=['node25'], name='op8')
node_list.append(op8)
node26 = helper.make_tensor_value_info('node26', 1, [1, 1, 1, 1])
op9 = helper.make_node('LeakyRelu', inputs=['node25'], outputs=['node26'], name='op9')
node_list.append(op9)
node27 = helper.make_tensor_value_info('node27', 1, [1])
node28 = helper.make_tensor_value_info('node28', 1, [1])
op10 = helper.make_node('Elu', inputs=['node27'], outputs=['node28'], name='op10', alpha=1.0)
node_list.append(op10)
node29 = helper.make_tensor_value_info('node29', 1, [1, 1, 1, 1])
op11 = helper.make_node('LpPool', inputs=['node26'], outputs=['node29'], name='op11', kernel_shape=[1, 1], strides=[1, 1])
node_list.append(op11)
node30 = helper.make_tensor_value_info('node30', 1, [1, 1, 1, 1])
op12 = helper.make_node('ConvTranspose', inputs=['node29', 'node29'], outputs=['node30'], name='op12', kernel_shape=[1, 1], strides=[1, 1], pads=[0, 0, 0, 0])
node_list.append(op12)
node31 = helper.make_tensor_value_info('node31', 1, [1])
node32 = helper.make_tensor_value_info('node32', 1, [1, 1, 1, 1])
op13 = helper.make_node('BatchNormalization', inputs=['node29', 'node31', 'node28', 'node28', 'node28'], outputs=['node32'], name='op13')
node_list.append(op13)
node33 = helper.make_tensor_value_info('node33', 1, [1, 1, 1, 1])
op14 = helper.make_node('ReduceLogSumExp', inputs=['node30'], outputs=['node33'], name='op14', axes=[2, 1, 0, 3])
node_list.append(op14)
node34 = helper.make_tensor_value_info('node34', 1, [1, 1, 1, 1])
op15 = helper.make_node('SpaceToDepth', inputs=['node32'], outputs=['node34'], name='op15', blocksize=1)
node_list.append(op15)
node35 = helper.make_tensor_value_info('node35', 1, [1, 1, 1, 1])
op16 = helper.make_node('Abs', inputs=['node34'], outputs=['node35'], name='op16')
node_list.append(op16)
node36 = helper.make_tensor_value_info('node36', 1, [1, 1, 1, 1])
op17 = helper.make_node('Tanh', inputs=['node34'], outputs=['node36'], name='op17')
node_list.append(op17)
node37 = helper.make_tensor_value_info('node37', 1, [1, 1, 1, 1])
op18 = helper.make_node('ReduceL1', inputs=['node35'], outputs=['node37'], name='op18', axes=[2, 0, 3, 1])
node_list.append(op18)
node38 = helper.make_tensor_value_info('node38', 1, [4, 2, 1, 5])
node39 = helper.make_tensor_value_info('node39', 1, [4, 5, 2, 1])
op19 = helper.make_node('Transpose', inputs=['node38'], outputs=['node39'], name='op19', perm=[0, 3, 1, 2])
node_list.append(op19)
node40 = helper.make_tensor_value_info('node40', 1, [4, 5, 2, 1])
op20 = helper.make_node('ReduceProd', inputs=['node39'], outputs=['node40'], name='op20', axes=[3])
node_list.append(op20)
node41 = helper.make_tensor_value_info('node41', 7, [4])
init_tensor.append(helper.make_tensor('node41', 7, dims=(4,), vals=[2, 3, 3, 1]))
node42 = helper.make_tensor_value_info('node42', 1, [4, 5, 2, 1])
op21 = helper.make_node('Gather', inputs=['node40', 'node41'], outputs=['node42'], name='op21')
node_list.append(op21)
node43 = helper.make_tensor_value_info('node43', 1, [1, 4, 5, 2])
op22 = helper.make_node('Transpose', inputs=['node42'], outputs=['node43'], name='op22', perm=[3, 0, 1, 2])
node_list.append(op22)
node44 = helper.make_tensor_value_info('node44', 1, [4, 5, 1, 1])
op23 = helper.make_node('GlobalMaxPool', inputs=['node42'], outputs=['node44'], name='op23')
node_list.append(op23)
node45 = helper.make_tensor_value_info('node45', 1, [5, 2])
node46 = helper.make_tensor_value_info('node46', 1, [5, 2])
op24 = helper.make_node('Cos', inputs=['node45'], outputs=['node46'], name='op24')
node_list.append(op24)
node47 = helper.make_tensor_value_info('node47', 1, [4, 5, 1, 1])
op25 = helper.make_node('GlobalMaxPool', inputs=['node44'], outputs=['node47'], name='op25')
node_list.append(op25)
node48 = helper.make_tensor_value_info('node48', 1, [5])
node49 = helper.make_tensor_value_info('node49', 1, [5])
node50 = helper.make_tensor_value_info('node50', 1, [5])
node51 = helper.make_tensor_value_info('node51', 1, [5])
node52 = helper.make_tensor_value_info('node52', 1, [4, 5, 1, 1])
op26 = helper.make_node('BatchNormalization', inputs=['node47', 'node48', 'node49', 'node50', 'node51'], outputs=['node52'], name='op26')
node_list.append(op26)
node53 = helper.make_tensor_value_info('node53', 1, [4, 5, 1, 1])
op27 = helper.make_node('Sign', inputs=['node47'], outputs=['node53'], name='op27')
node_list.append(op27)
node54 = helper.make_tensor_value_info('node54', 1, [4, 5, 1, 1])
op28 = helper.make_node('ReduceSumSquare', inputs=['node52'], outputs=['node54'], name='op28', axes=[2])
node_list.append(op28)
node55 = helper.make_tensor_value_info('node55', 1, [4, 5, 1, 1])
op29 = helper.make_node('Sigmoid', inputs=['node54'], outputs=['node55'], name='op29')
node_list.append(op29)
node56 = helper.make_tensor_value_info('node56', 1, [4, 5, 1, 1])
op30 = helper.make_node('Exp', inputs=['node54'], outputs=['node56'], name='op30')
node_list.append(op30)
node57 = helper.make_tensor_value_info('node57', 1, [4, 5, 1, 1])
op31 = helper.make_node('Relu', inputs=['node55'], outputs=['node57'], name='op31')
node_list.append(op31)
node58 = helper.make_tensor_value_info('node58', 7, [4])
init_tensor.append(helper.make_tensor('node58', 7, dims=(4,), vals=[1, 3, 1, 2]))
node59 = helper.make_tensor_value_info('node59', 1, [4, 15, 1, 2])
op32 = helper.make_node('Tile', inputs=['node57', 'node58'], outputs=['node59'], name='op32')
node_list.append(op32)
node60 = helper.make_tensor_value_info('node60', 1, [1])
op33 = helper.make_node('Elu', inputs=['node28'], outputs=['node60'], name='op33')
node_list.append(op33)
node61 = helper.make_tensor_value_info('node61', 1, [4, 15, 1, 2])
op34 = helper.make_node('ThresholdedRelu', inputs=['node59'], outputs=['node61'], name='op34', alpha=1.0)
node_list.append(op34)
node62 = helper.make_tensor_value_info('node62', 1, [4, 15, 1, 2])
op35 = helper.make_node('Dropout', inputs=['node61'], outputs=['node62'], name='op35')
node_list.append(op35)
node63 = helper.make_tensor_value_info('node63', 1, [4, 15, 1, 2])
op36 = helper.make_node('Sub', inputs=['node61', 'node61'], outputs=['node63'], name='op36')
node_list.append(op36)
node64 = helper.make_tensor_value_info('node64', 1, [4, 15, 1, 2])
op37 = helper.make_node('Add', inputs=['node63', 'node62'], outputs=['node64'], name='op37')
node_list.append(op37)
node65 = helper.make_tensor_value_info('node65', 1, [4, 15, 1, 1])
node66 = helper.make_tensor_value_info('node66', 1, [4, 4, 1, 2])
op38 = helper.make_node('Conv', inputs=['node63', 'node65'], outputs=['node66'], name='op38', kernel_shape=[1, 1], strides=[1, 1], pads=[0, 0, 0, 0])
node_list.append(op38)
node67 = helper.make_tensor_value_info('node67', 1, [4, 15, 1, 2])
op39 = helper.make_node('Neg', inputs=['node64'], outputs=['node67'], name='op39')
output_tensor.append(node56)
input_tensor.append(node1)
input_tensor.append(node2)
input_tensor.append(node3)
input_tensor.append(node4)
input_tensor.append(node5)
input_tensor.append(node6)
input_tensor.append(node7)
input_tensor.append(node8)
input_tensor.append(node11)
input_tensor.append(node12)
input_tensor.append(node14)
input_tensor.append(node17)
input_tensor.append(node27)
input_tensor.append(node31)
input_tensor.append(node38)
input_tensor.append(node45)
input_tensor.append(node48)
input_tensor.append(node49)
input_tensor.append(node50)
input_tensor.append(node51)
input_tensor.append(node65)
graph_def = helper.make_graph(node_list, 'test-model', input_tensor, output_tensor, init_tensor)
model = helper.make_model(graph_def, producer_name='onnx-example')
